/*! time-sheets 2017-03-20 */
!function() {
    var init = function(selector, pos, options, allBindingsAccessor) {
        this.data = [], this.year = {
            min: pos,
            max: options
        }, this.parse(allBindingsAccessor || []), "undefined" != typeof document && (this.container = "string" == typeof selector ? document.querySelector("#" + selector) : selector, 
        this.drawSections(), this.insertData());
    };
    init.prototype.insertData = function() {
        for (var tagNameArr = [], x = this.container.querySelector(".scale section").offsetWidth, n = 0, m = this.data.length; m > n; n++) {
            var t = this.data[n], b = this.createBubble(x, this.year.min, t.start, t.end), bgColorStyle = t.type.indexOf("#") > -1 ? "background-color:" + t.type + ";" : "", segs = [ '<span style="' + bgColorStyle + "margin-left: " + b.getStartOffset() + "px; width: " + b.getWidth() + 'px;" class="bubble bubble-' + (t.type || "default") + '" data-duration="' + (t.end ? Math.round((t.end - t.start) / 1e3 / 60 / 60 / 24 / 39) : "") + '"></span>', '<span class="date">' + b.getDateLabel() + "</span> ", '<span class="label">' + t.label + "</span>" ].join("");
            tagNameArr.push("<li>" + segs + "</li>");
        }
        this.container.innerHTML += '<ul class="data">' + tagNameArr.join("") + "</ul>";
    }, init.prototype.drawSections = function() {
        for (var tagNameArr = [], temp = this.year.min; temp <= this.year.max; temp++) tagNameArr.push("<section>" + temp + "</section>");
        this.container.className = "timesheet color-scheme-default", this.container.innerHTML = '<div class="scale">' + tagNameArr.join("") + "</div>";
    }, init.prototype.parseDate = function(date) {
        return -1 === date.indexOf("/") ? (date = new Date(parseInt(date, 10), 0, 1), date.hasMonth = !1) : (date = date.split("/"), 
        date = new Date(parseInt(date[1], 10), parseInt(date[0], 10) - 1, 1), date.hasMonth = !0), 
        date;
    }, init.prototype.parse = function(parts) {
        for (var i = 0, l = parts.length; l > i; i++) {
            var date = this.parseDate(parts[i][0]), now = 4 === parts[i].length ? this.parseDate(parts[i][1]) : null, lab = 4 === parts[i].length ? parts[i][2] : parts[i][1], paramType = 4 === parts[i].length ? parts[i][3] : 3 === parts[i].length ? parts[i][2] : "default";
            date.getFullYear() < this.year.min && (this.year.min = date.getFullYear()), now && now.getFullYear() > this.year.max ? this.year.max = now.getFullYear() : date.getFullYear() > this.year.max && (this.year.max = date.getFullYear()), 
            this.data.push({
                start: date,
                end: now,
                label: lab,
                type: paramType
            });
        }
    }, init.prototype.createBubble = function(v00, startColumn, endRow, endColumn) {
        return new Range(v00, startColumn, endRow, endColumn);
    };
    var Range = function(endRow, min, from, to) {
        this.min = min, this.start = from, this.end = to, this.widthMonth = endRow;
    };
    Range.prototype.formatMonth = function(month) {
        return month = parseInt(month, 10), month >= 10 ? month : "0" + month;
    }, Range.prototype.getStartOffset = function() {
        return this.widthMonth / 12 * (12 * (this.start.getFullYear() - this.min) + this.start.getMonth());
    }, Range.prototype.getFullYears = function() {
        return (this.end && this.end.getFullYear() || this.start.getFullYear()) - this.start.getFullYear();
    }, Range.prototype.getMonths = function() {
        var getFullYears = this.getFullYears(), months = 0;
        return this.end ? this.end.hasMonth ? (months += this.end.getMonth() + 1, months += 12 - (this.start.hasMonth ? this.start.getMonth() : 0), 
        months += 12 * (getFullYears - 1)) : (months += 12 - (this.start.hasMonth ? this.start.getMonth() : 0), 
        months += 12 * (getFullYears - 1 > 0 ? getFullYears - 1 : 0)) : months += this.start.hasMonth ? 1 : 12, 
        months;
    }, Range.prototype.getWidth = function() {
        return this.widthMonth / 12 * this.getMonths();
    }, Range.prototype.getDateLabel = function() {
        return [ (this.start.hasMonth ? this.formatMonth(this.start.getMonth() + 1) + "/" : "") + this.start.getFullYear(), this.end ? "-" + (this.end.hasMonth ? this.formatMonth(this.end.getMonth() + 1) + "/" : "") + this.end.getFullYear() : "" ].join("");
    }, window.Timesheet = init;
}(), function() {
    "use strict";
    jQuery(document).ready(function($) {});
}();