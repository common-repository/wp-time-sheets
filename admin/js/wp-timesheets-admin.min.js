/*! time-sheets 2017-03-20 */
!function(factory) {
    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : "object" == typeof module && module.exports ? module.exports = factory(require("jquery")) : factory(jQuery);
}(function($) {
    $.extend($.fn, {
        validate: function(options) {
            if (!this.length) return void (options && options.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing."));
            var validator = $.data(this[0], "validator");
            return validator ? validator : (this.attr("novalidate", "novalidate"), validator = new $.validator(options, this[0]), 
            $.data(this[0], "validator", validator), validator.settings.onsubmit && (this.on("click.validate", ":submit", function(event) {
                validator.settings.submitHandler && (validator.submitButton = event.target), $(this).hasClass("cancel") && (validator.cancelSubmit = !0), 
                void 0 !== $(this).attr("formnovalidate") && (validator.cancelSubmit = !0);
            }), this.on("submit.validate", function(event) {
                function handle() {
                    var hidden, result;
                    return !validator.settings.submitHandler || (validator.submitButton && (hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val($(validator.submitButton).val()).appendTo(validator.currentForm)), 
                    result = validator.settings.submitHandler.call(validator, validator.currentForm, event), 
                    validator.submitButton && hidden.remove(), void 0 !== result && result);
                }
                return validator.settings.debug && event.preventDefault(), validator.cancelSubmit ? (validator.cancelSubmit = !1, 
                handle()) : validator.form() ? validator.pendingRequest ? (validator.formSubmitted = !0, 
                !1) : handle() : (validator.focusInvalid(), !1);
            })), validator);
        },
        valid: function() {
            var valid, validator, errorList;
            return $(this[0]).is("form") ? valid = this.validate().form() : (errorList = [], 
            valid = !0, validator = $(this[0].form).validate(), this.each(function() {
                (valid = validator.element(this) && valid) || (errorList = errorList.concat(validator.errorList));
            }), validator.errorList = errorList), valid;
        },
        rules: function(command, argument) {
            var settings, staticRules, existingRules, data, param, filtered, element = this[0];
            if (null != element && null != element.form) {
                if (command) switch (settings = $.data(element.form, "validator").settings, staticRules = settings.rules, 
                existingRules = $.validator.staticRules(element), command) {
                  case "add":
                    $.extend(existingRules, $.validator.normalizeRule(argument)), delete existingRules.messages, 
                    staticRules[element.name] = existingRules, argument.messages && (settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages));
                    break;

                  case "remove":
                    return argument ? (filtered = {}, $.each(argument.split(/\s/), function(index, method) {
                        filtered[method] = existingRules[method], delete existingRules[method], "required" === method && $(element).removeAttr("aria-required");
                    }), filtered) : (delete staticRules[element.name], existingRules);
                }
                return data = $.validator.normalizeRules($.extend({}, $.validator.classRules(element), $.validator.attributeRules(element), $.validator.dataRules(element), $.validator.staticRules(element)), element), 
                data.required && (param = data.required, delete data.required, data = $.extend({
                    required: param
                }, data), $(element).attr("aria-required", "true")), data.remote && (param = data.remote, 
                delete data.remote, data = $.extend(data, {
                    remote: param
                })), data;
            }
        }
    }), $.extend($.expr.pseudos || $.expr[":"], {
        blank: function(a) {
            return !$.trim("" + $(a).val());
        },
        filled: function(a) {
            var val = $(a).val();
            return null !== val && !!$.trim("" + val);
        },
        unchecked: function(a) {
            return !$(a).prop("checked");
        }
    }), $.validator = function(options, form) {
        this.settings = $.extend(!0, {}, $.validator.defaults, options), this.currentForm = form, 
        this.init();
    }, $.validator.format = function(source, params) {
        return 1 === arguments.length ? function() {
            var args = $.makeArray(arguments);
            return args.unshift(source), $.validator.format.apply(this, args);
        } : void 0 === params ? source : (arguments.length > 2 && params.constructor !== Array && (params = $.makeArray(arguments).slice(1)), 
        params.constructor !== Array && (params = [ params ]), $.each(params, function(i, n) {
            source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function() {
                return n;
            });
        }), source);
    }, $.extend($.validator, {
        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            pendingClass: "pending",
            validClass: "valid",
            errorElement: "label",
            focusCleanup: !1,
            focusInvalid: !0,
            errorContainer: $([]),
            errorLabelContainer: $([]),
            onsubmit: !0,
            ignore: ":hidden",
            ignoreTitle: !1,
            onfocusin: function(element) {
                this.lastActive = element, this.settings.focusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass), 
                this.hideThese(this.errorsFor(element)));
            },
            onfocusout: function(element) {
                this.checkable(element) || !(element.name in this.submitted) && this.optional(element) || this.element(element);
            },
            onkeyup: function(element, event) {
                var excludedKeys = [ 16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225 ];
                9 === event.which && "" === this.elementValue(element) || $.inArray(event.keyCode, excludedKeys) !== -1 || (element.name in this.submitted || element.name in this.invalid) && this.element(element);
            },
            onclick: function(element) {
                element.name in this.submitted ? this.element(element) : element.parentNode.name in this.submitted && this.element(element.parentNode);
            },
            highlight: function(element, errorClass, validClass) {
                "radio" === element.type ? this.findByName(element.name).addClass(errorClass).removeClass(validClass) : $(element).addClass(errorClass).removeClass(validClass);
            },
            unhighlight: function(element, errorClass, validClass) {
                "radio" === element.type ? this.findByName(element.name).removeClass(errorClass).addClass(validClass) : $(element).removeClass(errorClass).addClass(validClass);
            }
        },
        setDefaults: function(settings) {
            $.extend($.validator.defaults, settings);
        },
        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            equalTo: "Please enter the same value again.",
            maxlength: $.validator.format("Please enter no more than {0} characters."),
            minlength: $.validator.format("Please enter at least {0} characters."),
            rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
            range: $.validator.format("Please enter a value between {0} and {1}."),
            max: $.validator.format("Please enter a value less than or equal to {0}."),
            min: $.validator.format("Please enter a value greater than or equal to {0}."),
            step: $.validator.format("Please enter a multiple of {0}.")
        },
        autoCreateRanges: !1,
        prototype: {
            init: function() {
                function delegate(event) {
                    !this.form && this.hasAttribute("contenteditable") && (this.form = $(this).closest("form")[0]);
                    var validator = $.data(this.form, "validator"), eventType = "on" + event.type.replace(/^validate/, ""), settings = validator.settings;
                    settings[eventType] && !$(this).is(settings.ignore) && settings[eventType].call(validator, this, event);
                }
                this.labelContainer = $(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm), 
                this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer), 
                this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, 
                this.invalid = {}, this.reset();
                var rules, groups = this.groups = {};
                $.each(this.settings.groups, function(key, value) {
                    "string" == typeof value && (value = value.split(/\s/)), $.each(value, function(index, name) {
                        groups[name] = key;
                    });
                }), rules = this.settings.rules, $.each(rules, function(key, value) {
                    rules[key] = $.validator.normalizeRule(value);
                }), $(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']", delegate).on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate), 
                this.settings.invalidHandler && $(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler), 
                $(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");
            },
            form: function() {
                return this.checkForm(), $.extend(this.submitted, this.errorMap), this.invalid = $.extend({}, this.errorMap), 
                this.valid() || $(this.currentForm).triggerHandler("invalid-form", [ this ]), this.showErrors(), 
                this.valid();
            },
            checkForm: function() {
                this.prepareForm();
                for (var i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) this.check(elements[i]);
                return this.valid();
            },
            element: function(element) {
                var rs, group, cleanElement = this.clean(element), checkElement = this.validationTargetFor(cleanElement), v = this, result = !0;
                return void 0 === checkElement ? delete this.invalid[cleanElement.name] : (this.prepareElement(checkElement), 
                this.currentElements = $(checkElement), group = this.groups[checkElement.name], 
                group && $.each(this.groups, function(name, testgroup) {
                    testgroup === group && name !== checkElement.name && (cleanElement = v.validationTargetFor(v.clean(v.findByName(name)))) && cleanElement.name in v.invalid && (v.currentElements.push(cleanElement), 
                    result = v.check(cleanElement) && result);
                }), rs = this.check(checkElement) !== !1, result = result && rs, this.invalid[checkElement.name] = !rs, 
                this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), 
                $(element).attr("aria-invalid", !rs)), result;
            },
            showErrors: function(errors) {
                if (errors) {
                    var validator = this;
                    $.extend(this.errorMap, errors), this.errorList = $.map(this.errorMap, function(message, name) {
                        return {
                            message: message,
                            element: validator.findByName(name)[0]
                        };
                    }), this.successList = $.grep(this.successList, function(element) {
                        return !(element.name in errors);
                    });
                }
                this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors();
            },
            resetForm: function() {
                $.fn.resetForm && $(this.currentForm).resetForm(), this.invalid = {}, this.submitted = {}, 
                this.prepareForm(), this.hideErrors();
                var elements = this.elements().removeData("previousValue").removeAttr("aria-invalid");
                this.resetElements(elements);
            },
            resetElements: function(elements) {
                var i;
                if (this.settings.unhighlight) for (i = 0; elements[i]; i++) this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, ""), 
                this.findByName(elements[i].name).removeClass(this.settings.validClass); else elements.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);
            },
            numberOfInvalids: function() {
                return this.objectLength(this.invalid);
            },
            objectLength: function(obj) {
                var i, count = 0;
                for (i in obj) obj[i] && count++;
                return count;
            },
            hideErrors: function() {
                this.hideThese(this.toHide);
            },
            hideThese: function(errors) {
                errors.not(this.containers).text(""), this.addWrapper(errors).hide();
            },
            valid: function() {
                return 0 === this.size();
            },
            size: function() {
                return this.errorList.length;
            },
            focusInvalid: function() {
                if (this.settings.focusInvalid) try {
                    $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin");
                } catch (e) {}
            },
            findLastActive: function() {
                var lastActive = this.lastActive;
                return lastActive && 1 === $.grep(this.errorList, function(n) {
                    return n.element.name === lastActive.name;
                }).length && lastActive;
            },
            elements: function() {
                var validator = this, rulesCache = {};
                return $(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function() {
                    var name = this.name || $(this).attr("name");
                    return !name && validator.settings.debug && window.console && console.error("%o has no name assigned", this), 
                    this.hasAttribute("contenteditable") && (this.form = $(this).closest("form")[0]), 
                    !(name in rulesCache || !validator.objectLength($(this).rules())) && (rulesCache[name] = !0, 
                    !0);
                });
            },
            clean: function(selector) {
                return $(selector)[0];
            },
            errors: function() {
                var errorClass = this.settings.errorClass.split(" ").join(".");
                return $(this.settings.errorElement + "." + errorClass, this.errorContext);
            },
            resetInternals: function() {
                this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = $([]), 
                this.toHide = $([]);
            },
            reset: function() {
                this.resetInternals(), this.currentElements = $([]);
            },
            prepareForm: function() {
                this.reset(), this.toHide = this.errors().add(this.containers);
            },
            prepareElement: function(element) {
                this.reset(), this.toHide = this.errorsFor(element);
            },
            elementValue: function(element) {
                var val, idx, $element = $(element), type = element.type;
                return "radio" === type || "checkbox" === type ? this.findByName(element.name).filter(":checked").val() : "number" === type && void 0 !== element.validity ? element.validity.badInput ? "NaN" : $element.val() : (val = element.hasAttribute("contenteditable") ? $element.text() : $element.val(), 
                "file" === type ? "C:\\fakepath\\" === val.substr(0, 12) ? val.substr(12) : (idx = val.lastIndexOf("/")) >= 0 ? val.substr(idx + 1) : (idx = val.lastIndexOf("\\"), 
                idx >= 0 ? val.substr(idx + 1) : val) : "string" == typeof val ? val.replace(/\r/g, "") : val);
            },
            check: function(element) {
                element = this.validationTargetFor(this.clean(element));
                var result, method, rule, rules = $(element).rules(), rulesCount = $.map(rules, function(n, i) {
                    return i;
                }).length, dependencyMismatch = !1, val = this.elementValue(element);
                if ("function" == typeof rules.normalizer) {
                    if ("string" != typeof (val = rules.normalizer.call(element, val))) throw new TypeError("The normalizer should return a string value.");
                    delete rules.normalizer;
                }
                for (method in rules) {
                    rule = {
                        method: method,
                        parameters: rules[method]
                    };
                    try {
                        if ("dependency-mismatch" === (result = $.validator.methods[method].call(this, val, element, rule.parameters)) && 1 === rulesCount) {
                            dependencyMismatch = !0;
                            continue;
                        }
                        if (dependencyMismatch = !1, "pending" === result) return void (this.toHide = this.toHide.not(this.errorsFor(element)));
                        if (!result) return this.formatAndAdd(element, rule), !1;
                    } catch (e) {
                        throw this.settings.debug && window.console && console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e), 
                        e instanceof TypeError && (e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method."), 
                        e;
                    }
                }
                if (!dependencyMismatch) return this.objectLength(rules) && this.successList.push(element), 
                !0;
            },
            customDataMessage: function(element, method) {
                return $(element).data("msg" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()) || $(element).data("msg");
            },
            customMessage: function(name, method) {
                var m = this.settings.messages[name];
                return m && (m.constructor === String ? m : m[method]);
            },
            findDefined: function() {
                for (var i = 0; i < arguments.length; i++) if (void 0 !== arguments[i]) return arguments[i];
            },
            defaultMessage: function(element, rule) {
                "string" == typeof rule && (rule = {
                    method: rule
                });
                var message = this.findDefined(this.customMessage(element.name, rule.method), this.customDataMessage(element, rule.method), !this.settings.ignoreTitle && element.title || void 0, $.validator.messages[rule.method], "<strong>Warning: No message defined for " + element.name + "</strong>"), theregex = /\$?\{(\d+)\}/g;
                return "function" == typeof message ? message = message.call(this, rule.parameters, element) : theregex.test(message) && (message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters)), 
                message;
            },
            formatAndAdd: function(element, rule) {
                var message = this.defaultMessage(element, rule);
                this.errorList.push({
                    message: message,
                    element: element,
                    method: rule.method
                }), this.errorMap[element.name] = message, this.submitted[element.name] = message;
            },
            addWrapper: function(toToggle) {
                return this.settings.wrapper && (toToggle = toToggle.add(toToggle.parent(this.settings.wrapper))), 
                toToggle;
            },
            defaultShowErrors: function() {
                var i, elements, error;
                for (i = 0; this.errorList[i]; i++) error = this.errorList[i], this.settings.highlight && this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass), 
                this.showLabel(error.element, error.message);
                if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success) for (i = 0; this.successList[i]; i++) this.showLabel(this.successList[i]);
                if (this.settings.unhighlight) for (i = 0, elements = this.validElements(); elements[i]; i++) this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
                this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show();
            },
            validElements: function() {
                return this.currentElements.not(this.invalidElements());
            },
            invalidElements: function() {
                return $(this.errorList).map(function() {
                    return this.element;
                });
            },
            showLabel: function(element, message) {
                var place, group, errorID, v, error = this.errorsFor(element), elementID = this.idOrName(element), describedBy = $(element).attr("aria-describedby");
                error.length ? (error.removeClass(this.settings.validClass).addClass(this.settings.errorClass), 
                error.html(message)) : (error = $("<" + this.settings.errorElement + ">").attr("id", elementID + "-error").addClass(this.settings.errorClass).html(message || ""), 
                place = error, this.settings.wrapper && (place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), 
                this.labelContainer.length ? this.labelContainer.append(place) : this.settings.errorPlacement ? this.settings.errorPlacement.call(this, place, $(element)) : place.insertAfter(element), 
                error.is("label") ? error.attr("for", elementID) : 0 === error.parents("label[for='" + this.escapeCssMeta(elementID) + "']").length && (errorID = error.attr("id"), 
                describedBy ? describedBy.match(new RegExp("\\b" + this.escapeCssMeta(errorID) + "\\b")) || (describedBy += " " + errorID) : describedBy = errorID, 
                $(element).attr("aria-describedby", describedBy), (group = this.groups[element.name]) && (v = this, 
                $.each(v.groups, function(name, testgroup) {
                    testgroup === group && $("[name='" + v.escapeCssMeta(name) + "']", v.currentForm).attr("aria-describedby", error.attr("id"));
                })))), !message && this.settings.success && (error.text(""), "string" == typeof this.settings.success ? error.addClass(this.settings.success) : this.settings.success(error, element)), 
                this.toShow = this.toShow.add(error);
            },
            errorsFor: function(element) {
                var name = this.escapeCssMeta(this.idOrName(element)), describer = $(element).attr("aria-describedby"), selector = "label[for='" + name + "'], label[for='" + name + "'] *";
                return describer && (selector = selector + ", #" + this.escapeCssMeta(describer).replace(/\s+/g, ", #")), 
                this.errors().filter(selector);
            },
            escapeCssMeta: function(string) {
                return string.replace(/([\\!"#$%&'()*+,.\/:;<=>?@\[\]^`{|}~])/g, "\\$1");
            },
            idOrName: function(element) {
                return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
            },
            validationTargetFor: function(element) {
                return this.checkable(element) && (element = this.findByName(element.name)), $(element).not(this.settings.ignore)[0];
            },
            checkable: function(element) {
                return /radio|checkbox/i.test(element.type);
            },
            findByName: function(name) {
                return $(this.currentForm).find("[name='" + this.escapeCssMeta(name) + "']");
            },
            getLength: function(value, element) {
                switch (element.nodeName.toLowerCase()) {
                  case "select":
                    return $("option:selected", element).length;

                  case "input":
                    if (this.checkable(element)) return this.findByName(element.name).filter(":checked").length;
                }
                return value.length;
            },
            depend: function(param, element) {
                return !this.dependTypes[typeof param] || this.dependTypes[typeof param](param, element);
            },
            dependTypes: {
                boolean: function(param) {
                    return param;
                },
                string: function(param, element) {
                    return !!$(param, element.form).length;
                },
                function: function(param, element) {
                    return param(element);
                }
            },
            optional: function(element) {
                var val = this.elementValue(element);
                return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
            },
            startRequest: function(element) {
                this.pending[element.name] || (this.pendingRequest++, $(element).addClass(this.settings.pendingClass), 
                this.pending[element.name] = !0);
            },
            stopRequest: function(element, valid) {
                this.pendingRequest--, this.pendingRequest < 0 && (this.pendingRequest = 0), delete this.pending[element.name], 
                $(element).removeClass(this.settings.pendingClass), valid && 0 === this.pendingRequest && this.formSubmitted && this.form() ? ($(this.currentForm).submit(), 
                this.formSubmitted = !1) : !valid && 0 === this.pendingRequest && this.formSubmitted && ($(this.currentForm).triggerHandler("invalid-form", [ this ]), 
                this.formSubmitted = !1);
            },
            previousValue: function(element, method) {
                return method = "string" == typeof method && method || "remote", $.data(element, "previousValue") || $.data(element, "previousValue", {
                    old: null,
                    valid: !0,
                    message: this.defaultMessage(element, {
                        method: method
                    })
                });
            },
            destroy: function() {
                this.resetForm(), $(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur");
            }
        },
        classRuleSettings: {
            required: {
                required: !0
            },
            email: {
                email: !0
            },
            url: {
                url: !0
            },
            date: {
                date: !0
            },
            dateISO: {
                dateISO: !0
            },
            number: {
                number: !0
            },
            digits: {
                digits: !0
            },
            creditcard: {
                creditcard: !0
            }
        },
        addClassRules: function(className, rules) {
            className.constructor === String ? this.classRuleSettings[className] = rules : $.extend(this.classRuleSettings, className);
        },
        classRules: function(element) {
            var rules = {}, classes = $(element).attr("class");
            return classes && $.each(classes.split(" "), function() {
                this in $.validator.classRuleSettings && $.extend(rules, $.validator.classRuleSettings[this]);
            }), rules;
        },
        normalizeAttributeRule: function(rules, type, method, value) {
            /min|max|step/.test(method) && (null === type || /number|range|text/.test(type)) && (value = Number(value), 
            isNaN(value) && (value = void 0)), value || 0 === value ? rules[method] = value : type === method && "range" !== type && (rules[method] = !0);
        },
        attributeRules: function(element) {
            var method, value, rules = {}, $element = $(element), type = element.getAttribute("type");
            for (method in $.validator.methods) "required" === method ? (value = element.getAttribute(method), 
            "" === value && (value = !0), value = !!value) : value = $element.attr(method), 
            this.normalizeAttributeRule(rules, type, method, value);
            return rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength) && delete rules.maxlength, 
            rules;
        },
        dataRules: function(element) {
            var method, value, rules = {}, $element = $(element), type = element.getAttribute("type");
            for (method in $.validator.methods) value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()), 
            this.normalizeAttributeRule(rules, type, method, value);
            return rules;
        },
        staticRules: function(element) {
            var rules = {}, validator = $.data(element.form, "validator");
            return validator.settings.rules && (rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {}), 
            rules;
        },
        normalizeRules: function(rules, element) {
            return $.each(rules, function(prop, val) {
                if (val === !1) return void delete rules[prop];
                if (val.param || val.depends) {
                    var keepRule = !0;
                    switch (typeof val.depends) {
                      case "string":
                        keepRule = !!$(val.depends, element.form).length;
                        break;

                      case "function":
                        keepRule = val.depends.call(element, element);
                    }
                    keepRule ? rules[prop] = void 0 === val.param || val.param : ($.data(element.form, "validator").resetElements($(element)), 
                    delete rules[prop]);
                }
            }), $.each(rules, function(rule, parameter) {
                rules[rule] = $.isFunction(parameter) && "normalizer" !== rule ? parameter(element) : parameter;
            }), $.each([ "minlength", "maxlength" ], function() {
                rules[this] && (rules[this] = Number(rules[this]));
            }), $.each([ "rangelength", "range" ], function() {
                var parts;
                rules[this] && ($.isArray(rules[this]) ? rules[this] = [ Number(rules[this][0]), Number(rules[this][1]) ] : "string" == typeof rules[this] && (parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/), 
                rules[this] = [ Number(parts[0]), Number(parts[1]) ]));
            }), $.validator.autoCreateRanges && (null != rules.min && null != rules.max && (rules.range = [ rules.min, rules.max ], 
            delete rules.min, delete rules.max), null != rules.minlength && null != rules.maxlength && (rules.rangelength = [ rules.minlength, rules.maxlength ], 
            delete rules.minlength, delete rules.maxlength)), rules;
        },
        normalizeRule: function(data) {
            if ("string" == typeof data) {
                var transformed = {};
                $.each(data.split(/\s/), function() {
                    transformed[this] = !0;
                }), data = transformed;
            }
            return data;
        },
        addMethod: function(name, method, message) {
            $.validator.methods[name] = method, $.validator.messages[name] = void 0 !== message ? message : $.validator.messages[name], 
            method.length < 3 && $.validator.addClassRules(name, $.validator.normalizeRule(name));
        },
        methods: {
            required: function(value, element, param) {
                if (!this.depend(param, element)) return "dependency-mismatch";
                if ("select" === element.nodeName.toLowerCase()) {
                    var val = $(element).val();
                    return val && val.length > 0;
                }
                return this.checkable(element) ? this.getLength(value, element) > 0 : value.length > 0;
            },
            email: function(value, element) {
                return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
            },
            url: function(value, element) {
                return this.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[\/?#]\S*)?$/i.test(value);
            },
            date: function(value, element) {
                return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
            },
            dateISO: function(value, element) {
                return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
            },
            number: function(value, element) {
                return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
            },
            digits: function(value, element) {
                return this.optional(element) || /^\d+$/.test(value);
            },
            minlength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param;
            },
            maxlength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length <= param;
            },
            rangelength: function(value, element, param) {
                var length = $.isArray(value) ? value.length : this.getLength(value, element);
                return this.optional(element) || length >= param[0] && length <= param[1];
            },
            min: function(value, element, param) {
                return this.optional(element) || value >= param;
            },
            max: function(value, element, param) {
                return this.optional(element) || value <= param;
            },
            range: function(value, element, param) {
                return this.optional(element) || value >= param[0] && value <= param[1];
            },
            step: function(value, element, param) {
                var decimals, type = $(element).attr("type"), errorMessage = "Step attribute on input type " + type + " is not supported.", supportedTypes = [ "text", "number", "range" ], re = new RegExp("\\b" + type + "\\b"), notSupported = type && !re.test(supportedTypes.join()), decimalPlaces = function(num) {
                    var match = ("" + num).match(/(?:\.(\d+))?$/);
                    return match && match[1] ? match[1].length : 0;
                }, toInt = function(num) {
                    return Math.round(num * Math.pow(10, decimals));
                }, valid = !0;
                if (notSupported) throw new Error(errorMessage);
                return decimals = decimalPlaces(param), (decimalPlaces(value) > decimals || toInt(value) % toInt(param) != 0) && (valid = !1), 
                this.optional(element) || valid;
            },
            equalTo: function(value, element, param) {
                var target = $(param);
                return this.settings.onfocusout && target.not(".validate-equalTo-blur").length && target.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function() {
                    $(element).valid();
                }), value === target.val();
            },
            remote: function(value, element, param, method) {
                if (this.optional(element)) return "dependency-mismatch";
                method = "string" == typeof method && method || "remote";
                var validator, data, optionDataString, previous = this.previousValue(element, method);
                return this.settings.messages[element.name] || (this.settings.messages[element.name] = {}), 
                previous.originalMessage = previous.originalMessage || this.settings.messages[element.name][method], 
                this.settings.messages[element.name][method] = previous.message, param = "string" == typeof param && {
                    url: param
                } || param, optionDataString = $.param($.extend({
                    data: value
                }, param.data)), previous.old === optionDataString ? previous.valid : (previous.old = optionDataString, 
                validator = this, this.startRequest(element), data = {}, data[element.name] = value, 
                $.ajax($.extend(!0, {
                    mode: "abort",
                    port: "validate" + element.name,
                    dataType: "json",
                    data: data,
                    context: validator.currentForm,
                    success: function(response) {
                        var errors, message, submitted, valid = response === !0 || "true" === response;
                        validator.settings.messages[element.name][method] = previous.originalMessage, valid ? (submitted = validator.formSubmitted, 
                        validator.resetInternals(), validator.toHide = validator.errorsFor(element), validator.formSubmitted = submitted, 
                        validator.successList.push(element), validator.invalid[element.name] = !1, validator.showErrors()) : (errors = {}, 
                        message = response || validator.defaultMessage(element, {
                            method: method,
                            parameters: value
                        }), errors[element.name] = previous.message = message, validator.invalid[element.name] = !0, 
                        validator.showErrors(errors)), previous.valid = valid, validator.stopRequest(element, valid);
                    }
                }, param)), "pending");
            }
        }
    });
    var ajax, pendingRequests = {};
    return $.ajaxPrefilter ? $.ajaxPrefilter(function(settings, _, xhr) {
        var port = settings.port;
        "abort" === settings.mode && (pendingRequests[port] && pendingRequests[port].abort(), 
        pendingRequests[port] = xhr);
    }) : (ajax = $.ajax, $.ajax = function(settings) {
        var mode = ("mode" in settings ? settings : $.ajaxSettings).mode, port = ("port" in settings ? settings : $.ajaxSettings).port;
        return "abort" === mode ? (pendingRequests[port] && pendingRequests[port].abort(), 
        pendingRequests[port] = ajax.apply(this, arguments), pendingRequests[port]) : ajax.apply(this, arguments);
    }), $;
}), function(window, $, undefined) {
    !function() {
        var $body, $datepickersContainer, datepicker, containerBuilt = !1, defaults = {
            classes: "",
            inline: !1,
            language: "ru",
            startDate: new Date(),
            firstDay: "",
            weekends: [ 6, 0 ],
            dateFormat: "",
            altField: "",
            altFieldDateFormat: "@",
            toggleSelected: !0,
            keyboardNav: !0,
            position: "bottom left",
            offset: 12,
            view: "days",
            minView: "days",
            showOtherMonths: !0,
            selectOtherMonths: !0,
            moveToOtherMonthsOnSelect: !0,
            showOtherYears: !0,
            selectOtherYears: !0,
            moveToOtherYearsOnSelect: !0,
            minDate: "",
            maxDate: "",
            disableNavWhenOutOfRange: !0,
            multipleDates: !1,
            multipleDatesSeparator: ",",
            range: !1,
            todayButton: !1,
            clearButton: !1,
            showEvent: "focus",
            autoClose: !1,
            monthsField: "monthsShort",
            prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',
            nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',
            navTitles: {
                days: "MM, <i>yyyy</i>",
                months: "yyyy",
                years: "yyyy1 - yyyy2"
            },
            timepicker: !1,
            onlyTimepicker: !1,
            dateTimeSeparator: " ",
            timeFormat: "",
            minHours: 0,
            maxHours: 24,
            minMinutes: 0,
            maxMinutes: 59,
            hoursStep: 1,
            minutesStep: 1,
            onSelect: "",
            onShow: "",
            onHide: "",
            onChangeMonth: "",
            onChangeYear: "",
            onChangeDecade: "",
            onChangeView: "",
            onRenderCell: ""
        }, hotKeys = {
            ctrlRight: [ 17, 39 ],
            ctrlUp: [ 17, 38 ],
            ctrlLeft: [ 17, 37 ],
            ctrlDown: [ 17, 40 ],
            shiftRight: [ 16, 39 ],
            shiftUp: [ 16, 38 ],
            shiftLeft: [ 16, 37 ],
            shiftDown: [ 16, 40 ],
            altUp: [ 18, 38 ],
            altRight: [ 18, 39 ],
            altLeft: [ 18, 37 ],
            altDown: [ 18, 40 ],
            ctrlShiftUp: [ 16, 17, 38 ]
        }, Datepicker = function(el, options) {
            this.el = el, this.$el = $(el), this.opts = $.extend(!0, {}, defaults, options, this.$el.data()), 
            void 0 == $body && ($body = $("body")), this.opts.startDate || (this.opts.startDate = new Date()), 
            "INPUT" == this.el.nodeName && (this.elIsInput = !0), this.opts.altField && (this.$altField = "string" == typeof this.opts.altField ? $(this.opts.altField) : this.opts.altField), 
            this.inited = !1, this.visible = !1, this.silent = !1, this.currentDate = this.opts.startDate, 
            this.currentView = this.opts.view, this._createShortCuts(), this.selectedDates = [], 
            this.views = {}, this.keys = [], this.minRange = "", this.maxRange = "", this._prevOnSelectValue = "", 
            this.init();
        };
        datepicker = Datepicker, datepicker.prototype = {
            VERSION: "2.2.3",
            viewIndexes: [ "days", "months", "years" ],
            init: function() {
                containerBuilt || this.opts.inline || !this.elIsInput || this._buildDatepickersContainer(), 
                this._buildBaseHtml(), this._defineLocale(this.opts.language), this._syncWithMinMaxDates(), 
                this.elIsInput && (this.opts.inline || (this._setPositionClasses(this.opts.position), 
                this._bindEvents()), this.opts.keyboardNav && !this.opts.onlyTimepicker && this._bindKeyboardEvents(), 
                this.$datepicker.on("mousedown", this._onMouseDownDatepicker.bind(this)), this.$datepicker.on("mouseup", this._onMouseUpDatepicker.bind(this))), 
                this.opts.classes && this.$datepicker.addClass(this.opts.classes), this.opts.timepicker && (this.timepicker = new $.fn.datepicker.Timepicker(this, this.opts), 
                this._bindTimepickerEvents()), this.opts.onlyTimepicker && this.$datepicker.addClass("-only-timepicker-"), 
                this.views[this.currentView] = new $.fn.datepicker.Body(this, this.currentView, this.opts), 
                this.views[this.currentView].show(), this.nav = new $.fn.datepicker.Navigation(this, this.opts), 
                this.view = this.currentView, this.$el.on("clickCell.adp", this._onClickCell.bind(this)), 
                this.$datepicker.on("mouseenter", ".datepicker--cell", this._onMouseEnterCell.bind(this)), 
                this.$datepicker.on("mouseleave", ".datepicker--cell", this._onMouseLeaveCell.bind(this)), 
                this.inited = !0;
            },
            _createShortCuts: function() {
                this.minDate = this.opts.minDate ? this.opts.minDate : new Date(-86399999136e5), 
                this.maxDate = this.opts.maxDate ? this.opts.maxDate : new Date(86399999136e5);
            },
            _bindEvents: function() {
                this.$el.on(this.opts.showEvent + ".adp", this._onShowEvent.bind(this)), this.$el.on("mouseup.adp", this._onMouseUpEl.bind(this)), 
                this.$el.on("blur.adp", this._onBlur.bind(this)), this.$el.on("keyup.adp", this._onKeyUpGeneral.bind(this)), 
                $(window).on("resize.adp", this._onResize.bind(this)), $("body").on("mouseup.adp", this._onMouseUpBody.bind(this));
            },
            _bindKeyboardEvents: function() {
                this.$el.on("keydown.adp", this._onKeyDown.bind(this)), this.$el.on("keyup.adp", this._onKeyUp.bind(this)), 
                this.$el.on("hotKey.adp", this._onHotKey.bind(this));
            },
            _bindTimepickerEvents: function() {
                this.$el.on("timeChange.adp", this._onTimeChange.bind(this));
            },
            isWeekend: function(day) {
                return this.opts.weekends.indexOf(day) !== -1;
            },
            _defineLocale: function(lang) {
                "string" == typeof lang ? (this.loc = $.fn.datepicker.language[lang], this.loc || (console.warn("Can't find language \"" + lang + '" in Datepicker.language, will use "ru" instead'), 
                this.loc = $.extend(!0, {}, $.fn.datepicker.language.ru)), this.loc = $.extend(!0, {}, $.fn.datepicker.language.ru, $.fn.datepicker.language[lang])) : this.loc = $.extend(!0, {}, $.fn.datepicker.language.ru, lang), 
                this.opts.dateFormat && (this.loc.dateFormat = this.opts.dateFormat), this.opts.timeFormat && (this.loc.timeFormat = this.opts.timeFormat), 
                "" !== this.opts.firstDay && (this.loc.firstDay = this.opts.firstDay), this.opts.timepicker && (this.loc.dateFormat = [ this.loc.dateFormat, this.loc.timeFormat ].join(this.opts.dateTimeSeparator)), 
                this.opts.onlyTimepicker && (this.loc.dateFormat = this.loc.timeFormat);
                var boundary = this._getWordBoundaryRegExp;
                (this.loc.timeFormat.match(boundary("aa")) || this.loc.timeFormat.match(boundary("AA"))) && (this.ampm = !0);
            },
            _buildDatepickersContainer: function() {
                containerBuilt = !0, $body.append('<div class="datepickers-container" id="datepickers-container"></div>'), 
                $datepickersContainer = $("#datepickers-container");
            },
            _buildBaseHtml: function() {
                var $appendTarget, $inline = $('<div class="datepicker-inline">');
                $appendTarget = "INPUT" == this.el.nodeName ? this.opts.inline ? $inline.insertAfter(this.$el) : $datepickersContainer : $inline.appendTo(this.$el), 
                this.$datepicker = $('<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>').appendTo($appendTarget), 
                this.$content = $(".datepicker--content", this.$datepicker), this.$nav = $(".datepicker--nav", this.$datepicker);
            },
            _triggerOnChange: function() {
                if (!this.selectedDates.length) {
                    if ("" === this._prevOnSelectValue) return;
                    return this._prevOnSelectValue = "", this.opts.onSelect("", "", this);
                }
                var formattedDates, selectedDates = this.selectedDates, parsedSelected = datepicker.getParsedDate(selectedDates[0]), _this = this, dates = new Date(parsedSelected.year, parsedSelected.month, parsedSelected.date, parsedSelected.hours, parsedSelected.minutes);
                formattedDates = selectedDates.map(function(date) {
                    return _this.formatDate(_this.loc.dateFormat, date);
                }).join(this.opts.multipleDatesSeparator), (this.opts.multipleDates || this.opts.range) && (dates = selectedDates.map(function(date) {
                    var parsedDate = datepicker.getParsedDate(date);
                    return new Date(parsedDate.year, parsedDate.month, parsedDate.date, parsedDate.hours, parsedDate.minutes);
                })), this._prevOnSelectValue = formattedDates, this.opts.onSelect(formattedDates, dates, this);
            },
            next: function() {
                var d = this.parsedDate, o = this.opts;
                switch (this.view) {
                  case "days":
                    this.date = new Date(d.year, d.month + 1, 1), o.onChangeMonth && o.onChangeMonth(this.parsedDate.month, this.parsedDate.year);
                    break;

                  case "months":
                    this.date = new Date(d.year + 1, d.month, 1), o.onChangeYear && o.onChangeYear(this.parsedDate.year);
                    break;

                  case "years":
                    this.date = new Date(d.year + 10, 0, 1), o.onChangeDecade && o.onChangeDecade(this.curDecade);
                }
            },
            prev: function() {
                var d = this.parsedDate, o = this.opts;
                switch (this.view) {
                  case "days":
                    this.date = new Date(d.year, d.month - 1, 1), o.onChangeMonth && o.onChangeMonth(this.parsedDate.month, this.parsedDate.year);
                    break;

                  case "months":
                    this.date = new Date(d.year - 1, d.month, 1), o.onChangeYear && o.onChangeYear(this.parsedDate.year);
                    break;

                  case "years":
                    this.date = new Date(d.year - 10, 0, 1), o.onChangeDecade && o.onChangeDecade(this.curDecade);
                }
            },
            formatDate: function(string, date) {
                date = date || this.date;
                var validHours, result = string, boundary = this._getWordBoundaryRegExp, locale = this.loc, leadingZero = datepicker.getLeadingZeroNum, decade = datepicker.getDecade(date), d = datepicker.getParsedDate(date), fullHours = d.fullHours, hours = d.hours, ampm = string.match(boundary("aa")) || string.match(boundary("AA")), dayPeriod = "am", replacer = this._replacer;
                switch (this.opts.timepicker && this.timepicker && ampm && (validHours = this.timepicker._getValidHoursFromDate(date, ampm), 
                fullHours = leadingZero(validHours.hours), hours = validHours.hours, dayPeriod = validHours.dayPeriod), 
                !0) {
                  case /@/.test(result):
                    result = result.replace(/@/, date.getTime());

                  case /aa/.test(result):
                    result = replacer(result, boundary("aa"), dayPeriod);

                  case /AA/.test(result):
                    result = replacer(result, boundary("AA"), dayPeriod.toUpperCase());

                  case /dd/.test(result):
                    result = replacer(result, boundary("dd"), d.fullDate);

                  case /d/.test(result):
                    result = replacer(result, boundary("d"), d.date);

                  case /DD/.test(result):
                    result = replacer(result, boundary("DD"), locale.days[d.day]);

                  case /D/.test(result):
                    result = replacer(result, boundary("D"), locale.daysShort[d.day]);

                  case /mm/.test(result):
                    result = replacer(result, boundary("mm"), d.fullMonth);

                  case /m/.test(result):
                    result = replacer(result, boundary("m"), d.month + 1);

                  case /MM/.test(result):
                    result = replacer(result, boundary("MM"), this.loc.months[d.month]);

                  case /M/.test(result):
                    result = replacer(result, boundary("M"), locale.monthsShort[d.month]);

                  case /ii/.test(result):
                    result = replacer(result, boundary("ii"), d.fullMinutes);

                  case /i/.test(result):
                    result = replacer(result, boundary("i"), d.minutes);

                  case /hh/.test(result):
                    result = replacer(result, boundary("hh"), fullHours);

                  case /h/.test(result):
                    result = replacer(result, boundary("h"), hours);

                  case /yyyy/.test(result):
                    result = replacer(result, boundary("yyyy"), d.year);

                  case /yyyy1/.test(result):
                    result = replacer(result, boundary("yyyy1"), decade[0]);

                  case /yyyy2/.test(result):
                    result = replacer(result, boundary("yyyy2"), decade[1]);

                  case /yy/.test(result):
                    result = replacer(result, boundary("yy"), d.year.toString().slice(-2));
                }
                return result;
            },
            _replacer: function(str, reg, data) {
                return str.replace(reg, function(match, p1, p2, p3) {
                    return p1 + data + p3;
                });
            },
            _getWordBoundaryRegExp: function(sign) {
                var symbols = "\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";
                return new RegExp("(^|>|" + symbols + ")(" + sign + ")($|<|" + symbols + ")", "g");
            },
            selectDate: function(date) {
                var _this = this, opts = _this.opts, d = _this.parsedDate, selectedDates = _this.selectedDates, len = selectedDates.length, newDate = "";
                if (Array.isArray(date)) return void date.forEach(function(d) {
                    _this.selectDate(d);
                });
                if (date instanceof Date) {
                    if (this.lastSelectedDate = date, this.timepicker && this.timepicker._setTime(date), 
                    _this._trigger("selectDate", date), this.timepicker && (date.setHours(this.timepicker.hours), 
                    date.setMinutes(this.timepicker.minutes)), "days" == _this.view && date.getMonth() != d.month && opts.moveToOtherMonthsOnSelect && (newDate = new Date(date.getFullYear(), date.getMonth(), 1)), 
                    "years" == _this.view && date.getFullYear() != d.year && opts.moveToOtherYearsOnSelect && (newDate = new Date(date.getFullYear(), 0, 1)), 
                    newDate && (_this.silent = !0, _this.date = newDate, _this.silent = !1, _this.nav._render()), 
                    opts.multipleDates && !opts.range) {
                        if (len === opts.multipleDates) return;
                        _this._isSelected(date) || _this.selectedDates.push(date);
                    } else opts.range ? 2 == len ? (_this.selectedDates = [ date ], _this.minRange = date, 
                    _this.maxRange = "") : 1 == len ? (_this.selectedDates.push(date), _this.maxRange ? _this.minRange = date : _this.maxRange = date, 
                    datepicker.bigger(_this.maxRange, _this.minRange) && (_this.maxRange = _this.minRange, 
                    _this.minRange = date), _this.selectedDates = [ _this.minRange, _this.maxRange ]) : (_this.selectedDates = [ date ], 
                    _this.minRange = date) : _this.selectedDates = [ date ];
                    _this._setInputValue(), opts.onSelect && _this._triggerOnChange(), opts.autoClose && !this.timepickerIsActive && (opts.multipleDates || opts.range ? opts.range && 2 == _this.selectedDates.length && _this.hide() : _this.hide()), 
                    _this.views[this.currentView]._render();
                }
            },
            removeDate: function(date) {
                var selected = this.selectedDates, _this = this;
                if (date instanceof Date) return selected.some(function(curDate, i) {
                    if (datepicker.isSame(curDate, date)) return selected.splice(i, 1), _this.selectedDates.length ? _this.lastSelectedDate = _this.selectedDates[_this.selectedDates.length - 1] : (_this.minRange = "", 
                    _this.maxRange = "", _this.lastSelectedDate = ""), _this.views[_this.currentView]._render(), 
                    _this._setInputValue(), _this.opts.onSelect && _this._triggerOnChange(), !0;
                });
            },
            today: function() {
                this.silent = !0, this.view = this.opts.minView, this.silent = !1, this.date = new Date(), 
                this.opts.todayButton instanceof Date && this.selectDate(this.opts.todayButton);
            },
            clear: function() {
                this.selectedDates = [], this.minRange = "", this.maxRange = "", this.views[this.currentView]._render(), 
                this._setInputValue(), this.opts.onSelect && this._triggerOnChange();
            },
            update: function(param, value) {
                var len = arguments.length, lastSelectedDate = this.lastSelectedDate;
                return 2 == len ? this.opts[param] = value : 1 == len && "object" == typeof param && (this.opts = $.extend(!0, this.opts, param)), 
                this._createShortCuts(), this._syncWithMinMaxDates(), this._defineLocale(this.opts.language), 
                this.nav._addButtonsIfNeed(), this.opts.onlyTimepicker || this.nav._render(), this.views[this.currentView]._render(), 
                this.elIsInput && !this.opts.inline && (this._setPositionClasses(this.opts.position), 
                this.visible && this.setPosition(this.opts.position)), this.opts.classes && this.$datepicker.addClass(this.opts.classes), 
                this.opts.onlyTimepicker && this.$datepicker.addClass("-only-timepicker-"), this.opts.timepicker && (lastSelectedDate && this.timepicker._handleDate(lastSelectedDate), 
                this.timepicker._updateRanges(), this.timepicker._updateCurrentTime(), lastSelectedDate && (lastSelectedDate.setHours(this.timepicker.hours), 
                lastSelectedDate.setMinutes(this.timepicker.minutes))), this._setInputValue(), this;
            },
            _syncWithMinMaxDates: function() {
                var curTime = this.date.getTime();
                this.silent = !0, this.minTime > curTime && (this.date = this.minDate), this.maxTime < curTime && (this.date = this.maxDate), 
                this.silent = !1;
            },
            _isSelected: function(checkDate, cellType) {
                var res = !1;
                return this.selectedDates.some(function(date) {
                    if (datepicker.isSame(date, checkDate, cellType)) return res = date, !0;
                }), res;
            },
            _setInputValue: function() {
                var altValues, _this = this, opts = _this.opts, format = _this.loc.dateFormat, altFormat = opts.altFieldDateFormat, value = _this.selectedDates.map(function(date) {
                    return _this.formatDate(format, date);
                });
                opts.altField && _this.$altField.length && (altValues = this.selectedDates.map(function(date) {
                    return _this.formatDate(altFormat, date);
                }), altValues = altValues.join(this.opts.multipleDatesSeparator), this.$altField.val(altValues)), 
                value = value.join(this.opts.multipleDatesSeparator), this.$el.val(value);
            },
            _isInRange: function(date, type) {
                var time = date.getTime(), d = datepicker.getParsedDate(date), min = datepicker.getParsedDate(this.minDate), max = datepicker.getParsedDate(this.maxDate), dMinTime = new Date(d.year, d.month, min.date).getTime(), dMaxTime = new Date(d.year, d.month, max.date).getTime(), types = {
                    day: time >= this.minTime && time <= this.maxTime,
                    month: dMinTime >= this.minTime && dMaxTime <= this.maxTime,
                    year: d.year >= min.year && d.year <= max.year
                };
                return type ? types[type] : types.day;
            },
            _getDimensions: function($el) {
                var offset = $el.offset();
                return {
                    width: $el.outerWidth(),
                    height: $el.outerHeight(),
                    left: offset.left,
                    top: offset.top
                };
            },
            _getDateFromCell: function(cell) {
                var curDate = this.parsedDate, year = cell.data("year") || curDate.year, month = void 0 == cell.data("month") ? curDate.month : cell.data("month"), date = cell.data("date") || 1;
                return new Date(year, month, date);
            },
            _setPositionClasses: function(pos) {
                pos = pos.split(" ");
                var main = pos[0], sec = pos[1], classes = "datepicker -" + main + "-" + sec + "- -from-" + main + "-";
                this.visible && (classes += " active"), this.$datepicker.removeAttr("class").addClass(classes);
            },
            setPosition: function(position) {
                position = position || this.opts.position;
                var top, left, dims = this._getDimensions(this.$el), selfDims = this._getDimensions(this.$datepicker), pos = position.split(" "), offset = this.opts.offset, main = pos[0], secondary = pos[1];
                switch (main) {
                  case "top":
                    top = dims.top - selfDims.height - offset;
                    break;

                  case "right":
                    left = dims.left + dims.width + offset;
                    break;

                  case "bottom":
                    top = dims.top + dims.height + offset;
                    break;

                  case "left":
                    left = dims.left - selfDims.width - offset;
                }
                switch (secondary) {
                  case "top":
                    top = dims.top;
                    break;

                  case "right":
                    left = dims.left + dims.width - selfDims.width;
                    break;

                  case "bottom":
                    top = dims.top + dims.height - selfDims.height;
                    break;

                  case "left":
                    left = dims.left;
                    break;

                  case "center":
                    /left|right/.test(main) ? top = dims.top + dims.height / 2 - selfDims.height / 2 : left = dims.left + dims.width / 2 - selfDims.width / 2;
                }
                this.$datepicker.css({
                    left: left,
                    top: top
                });
            },
            show: function() {
                var onShow = this.opts.onShow;
                this.setPosition(this.opts.position), this.$datepicker.addClass("active"), this.visible = !0, 
                onShow && this._bindVisionEvents(onShow);
            },
            hide: function() {
                var onHide = this.opts.onHide;
                this.$datepicker.removeClass("active").css({
                    left: "-100000px"
                }), this.focused = "", this.keys = [], this.inFocus = !1, this.visible = !1, this.$el.blur(), 
                onHide && this._bindVisionEvents(onHide);
            },
            down: function(date) {
                this._changeView(date, "down");
            },
            up: function(date) {
                this._changeView(date, "up");
            },
            _bindVisionEvents: function(event) {
                this.$datepicker.off("transitionend.dp"), event(this, !1), this.$datepicker.one("transitionend.dp", event.bind(this, this, !0));
            },
            _changeView: function(date, dir) {
                date = date || this.focused || this.date;
                var nextView = "up" == dir ? this.viewIndex + 1 : this.viewIndex - 1;
                nextView > 2 && (nextView = 2), nextView < 0 && (nextView = 0), this.silent = !0, 
                this.date = new Date(date.getFullYear(), date.getMonth(), 1), this.silent = !1, 
                this.view = this.viewIndexes[nextView];
            },
            _handleHotKey: function(key) {
                var focusedParsed, newDate, totalDaysInNextMonth, date = datepicker.getParsedDate(this._getFocusedDate()), o = this.opts, monthChanged = !1, yearChanged = !1, decadeChanged = !1, y = date.year, m = date.month, d = date.date;
                switch (key) {
                  case "ctrlRight":
                  case "ctrlUp":
                    m += 1, monthChanged = !0;
                    break;

                  case "ctrlLeft":
                  case "ctrlDown":
                    m -= 1, monthChanged = !0;
                    break;

                  case "shiftRight":
                  case "shiftUp":
                    yearChanged = !0, y += 1;
                    break;

                  case "shiftLeft":
                  case "shiftDown":
                    yearChanged = !0, y -= 1;
                    break;

                  case "altRight":
                  case "altUp":
                    decadeChanged = !0, y += 10;
                    break;

                  case "altLeft":
                  case "altDown":
                    decadeChanged = !0, y -= 10;
                    break;

                  case "ctrlShiftUp":
                    this.up();
                }
                totalDaysInNextMonth = datepicker.getDaysCount(new Date(y, m)), newDate = new Date(y, m, d), 
                totalDaysInNextMonth < d && (d = totalDaysInNextMonth), newDate.getTime() < this.minTime ? newDate = this.minDate : newDate.getTime() > this.maxTime && (newDate = this.maxDate), 
                this.focused = newDate, focusedParsed = datepicker.getParsedDate(newDate), monthChanged && o.onChangeMonth && o.onChangeMonth(focusedParsed.month, focusedParsed.year), 
                yearChanged && o.onChangeYear && o.onChangeYear(focusedParsed.year), decadeChanged && o.onChangeDecade && o.onChangeDecade(this.curDecade);
            },
            _registerKey: function(key) {
                this.keys.some(function(curKey) {
                    return curKey == key;
                }) || this.keys.push(key);
            },
            _unRegisterKey: function(key) {
                var index = this.keys.indexOf(key);
                this.keys.splice(index, 1);
            },
            _isHotKeyPressed: function() {
                var currentHotKey, found = !1, _this = this, pressedKeys = this.keys.sort();
                for (var hotKey in hotKeys) currentHotKey = hotKeys[hotKey], pressedKeys.length == currentHotKey.length && currentHotKey.every(function(key, i) {
                    return key == pressedKeys[i];
                }) && (_this._trigger("hotKey", hotKey), found = !0);
                return found;
            },
            _trigger: function(event, args) {
                this.$el.trigger(event, args);
            },
            _focusNextCell: function(keyCode, type) {
                type = type || this.cellType;
                var date = datepicker.getParsedDate(this._getFocusedDate()), y = date.year, m = date.month, d = date.date;
                if (!this._isHotKeyPressed()) {
                    switch (keyCode) {
                      case 37:
                        "day" == type && (d -= 1), "month" == type && (m -= 1), "year" == type && (y -= 1);
                        break;

                      case 38:
                        "day" == type && (d -= 7), "month" == type && (m -= 3), "year" == type && (y -= 4);
                        break;

                      case 39:
                        "day" == type && (d += 1), "month" == type && (m += 1), "year" == type && (y += 1);
                        break;

                      case 40:
                        "day" == type && (d += 7), "month" == type && (m += 3), "year" == type && (y += 4);
                    }
                    var nd = new Date(y, m, d);
                    nd.getTime() < this.minTime ? nd = this.minDate : nd.getTime() > this.maxTime && (nd = this.maxDate), 
                    this.focused = nd;
                }
            },
            _getFocusedDate: function() {
                var focused = this.focused || this.selectedDates[this.selectedDates.length - 1], d = this.parsedDate;
                if (!focused) switch (this.view) {
                  case "days":
                    focused = new Date(d.year, d.month, new Date().getDate());
                    break;

                  case "months":
                    focused = new Date(d.year, d.month, 1);
                    break;

                  case "years":
                    focused = new Date(d.year, 0, 1);
                }
                return focused;
            },
            _getCell: function(date, type) {
                type = type || this.cellType;
                var $cell, d = datepicker.getParsedDate(date), selector = '.datepicker--cell[data-year="' + d.year + '"]';
                switch (type) {
                  case "month":
                    selector = '[data-month="' + d.month + '"]';
                    break;

                  case "day":
                    selector += '[data-month="' + d.month + '"][data-date="' + d.date + '"]';
                }
                return $cell = this.views[this.currentView].$el.find(selector), $cell.length ? $cell : $("");
            },
            destroy: function() {
                var _this = this;
                _this.$el.off(".adp").data("datepicker", ""), _this.selectedDates = [], _this.focused = "", 
                _this.views = {}, _this.keys = [], _this.minRange = "", _this.maxRange = "", _this.opts.inline || !_this.elIsInput ? _this.$datepicker.closest(".datepicker-inline").remove() : _this.$datepicker.remove();
            },
            _handleAlreadySelectedDates: function(alreadySelected, selectedDate) {
                this.opts.range ? this.opts.toggleSelected ? this.removeDate(selectedDate) : 2 != this.selectedDates.length && this._trigger("clickCell", selectedDate) : this.opts.toggleSelected && this.removeDate(selectedDate), 
                this.opts.toggleSelected || (this.lastSelectedDate = alreadySelected, this.opts.timepicker && (this.timepicker._setTime(alreadySelected), 
                this.timepicker.update()));
            },
            _onShowEvent: function(e) {
                this.visible || this.show();
            },
            _onBlur: function() {
                !this.inFocus && this.visible && this.hide();
            },
            _onMouseDownDatepicker: function(e) {
                this.inFocus = !0;
            },
            _onMouseUpDatepicker: function(e) {
                this.inFocus = !1, e.originalEvent.inFocus = !0, e.originalEvent.timepickerFocus || this.$el.focus();
            },
            _onKeyUpGeneral: function(e) {
                this.$el.val() || this.clear();
            },
            _onResize: function() {
                this.visible && this.setPosition();
            },
            _onMouseUpBody: function(e) {
                e.originalEvent.inFocus || this.visible && !this.inFocus && this.hide();
            },
            _onMouseUpEl: function(e) {
                e.originalEvent.inFocus = !0, setTimeout(this._onKeyUpGeneral.bind(this), 4);
            },
            _onKeyDown: function(e) {
                var code = e.which;
                if (this._registerKey(code), code >= 37 && code <= 40 && (e.preventDefault(), this._focusNextCell(code)), 
                13 == code && this.focused) {
                    if (this._getCell(this.focused).hasClass("-disabled-")) return;
                    if (this.view != this.opts.minView) this.down(); else {
                        var alreadySelected = this._isSelected(this.focused, this.cellType);
                        if (!alreadySelected) return this.timepicker && (this.focused.setHours(this.timepicker.hours), 
                        this.focused.setMinutes(this.timepicker.minutes)), void this.selectDate(this.focused);
                        this._handleAlreadySelectedDates(alreadySelected, this.focused);
                    }
                }
                27 == code && this.hide();
            },
            _onKeyUp: function(e) {
                var code = e.which;
                this._unRegisterKey(code);
            },
            _onHotKey: function(e, hotKey) {
                this._handleHotKey(hotKey);
            },
            _onMouseEnterCell: function(e) {
                var $cell = $(e.target).closest(".datepicker--cell"), date = this._getDateFromCell($cell);
                this.silent = !0, this.focused && (this.focused = ""), $cell.addClass("-focus-"), 
                this.focused = date, this.silent = !1, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], 
                this.maxRange = "", datepicker.less(this.minRange, this.focused) && (this.maxRange = this.minRange, 
                this.minRange = ""), this.views[this.currentView]._update());
            },
            _onMouseLeaveCell: function(e) {
                $(e.target).closest(".datepicker--cell").removeClass("-focus-"), this.silent = !0, 
                this.focused = "", this.silent = !1;
            },
            _onTimeChange: function(e, h, m) {
                var date = new Date(), selectedDates = this.selectedDates, selected = !1;
                selectedDates.length && (selected = !0, date = this.lastSelectedDate), date.setHours(h), 
                date.setMinutes(m), selected || this._getCell(date).hasClass("-disabled-") ? (this._setInputValue(), 
                this.opts.onSelect && this._triggerOnChange()) : this.selectDate(date);
            },
            _onClickCell: function(e, date) {
                this.timepicker && (date.setHours(this.timepicker.hours), date.setMinutes(this.timepicker.minutes)), 
                this.selectDate(date);
            },
            set focused(val) {
                if (!val && this.focused) {
                    var $cell = this._getCell(this.focused);
                    $cell.length && $cell.removeClass("-focus-");
                }
                this._focused = val, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], 
                this.maxRange = "", datepicker.less(this.minRange, this._focused) && (this.maxRange = this.minRange, 
                this.minRange = "")), this.silent || (this.date = val);
            },
            get focused() {
                return this._focused;
            },
            get parsedDate() {
                return datepicker.getParsedDate(this.date);
            },
            set date(val) {
                if (val instanceof Date) return this.currentDate = val, this.inited && !this.silent && (this.views[this.view]._render(), 
                this.nav._render(), this.visible && this.elIsInput && this.setPosition()), val;
            },
            get date() {
                return this.currentDate;
            },
            set view(val) {
                if (this.viewIndex = this.viewIndexes.indexOf(val), !(this.viewIndex < 0)) return this.prevView = this.currentView, 
                this.currentView = val, this.inited && (this.views[val] ? this.views[val]._render() : this.views[val] = new $.fn.datepicker.Body(this, val, this.opts), 
                this.views[this.prevView].hide(), this.views[val].show(), this.nav._render(), this.opts.onChangeView && this.opts.onChangeView(val), 
                this.elIsInput && this.visible && this.setPosition()), val;
            },
            get view() {
                return this.currentView;
            },
            get cellType() {
                return this.view.substring(0, this.view.length - 1);
            },
            get minTime() {
                var min = datepicker.getParsedDate(this.minDate);
                return new Date(min.year, min.month, min.date).getTime();
            },
            get maxTime() {
                var max = datepicker.getParsedDate(this.maxDate);
                return new Date(max.year, max.month, max.date).getTime();
            },
            get curDecade() {
                return datepicker.getDecade(this.date);
            }
        }, datepicker.getDaysCount = function(date) {
            return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
        }, datepicker.getParsedDate = function(date) {
            return {
                year: date.getFullYear(),
                month: date.getMonth(),
                fullMonth: date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1,
                date: date.getDate(),
                fullDate: date.getDate() < 10 ? "0" + date.getDate() : date.getDate(),
                day: date.getDay(),
                hours: date.getHours(),
                fullHours: date.getHours() < 10 ? "0" + date.getHours() : date.getHours(),
                minutes: date.getMinutes(),
                fullMinutes: date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes()
            };
        }, datepicker.getDecade = function(date) {
            var firstYear = 10 * Math.floor(date.getFullYear() / 10);
            return [ firstYear, firstYear + 9 ];
        }, datepicker.template = function(str, data) {
            return str.replace(/#\{([\w]+)\}/g, function(source, match) {
                if (data[match] || 0 === data[match]) return data[match];
            });
        }, datepicker.isSame = function(date1, date2, type) {
            if (!date1 || !date2) return !1;
            var d1 = datepicker.getParsedDate(date1), d2 = datepicker.getParsedDate(date2), _type = type ? type : "day";
            return {
                day: d1.date == d2.date && d1.month == d2.month && d1.year == d2.year,
                month: d1.month == d2.month && d1.year == d2.year,
                year: d1.year == d2.year
            }[_type];
        }, datepicker.less = function(dateCompareTo, date, type) {
            return !(!dateCompareTo || !date) && date.getTime() < dateCompareTo.getTime();
        }, datepicker.bigger = function(dateCompareTo, date, type) {
            return !(!dateCompareTo || !date) && date.getTime() > dateCompareTo.getTime();
        }, datepicker.getLeadingZeroNum = function(num) {
            return parseInt(num) < 10 ? "0" + num : num;
        }, datepicker.resetTime = function(date) {
            if ("object" == typeof date) return date = datepicker.getParsedDate(date), new Date(date.year, date.month, date.date);
        }, $.fn.datepicker = function(options) {
            return this.each(function() {
                if ($.data(this, "datepicker")) {
                    var _this = $.data(this, "datepicker");
                    _this.opts = $.extend(!0, _this.opts, options), _this.update();
                } else $.data(this, "datepicker", new Datepicker(this, options));
            });
        }, $.fn.datepicker.Constructor = Datepicker, $.fn.datepicker.language = {
            ru: {
                days: [ "Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота" ],
                daysShort: [ "Вос", "Пон", "Вто", "Сре", "Чет", "Пят", "Суб" ],
                daysMin: [ "Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб" ],
                months: [ "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь" ],
                monthsShort: [ "Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек" ],
                today: "Сегодня",
                clear: "Очистить",
                dateFormat: "dd.mm.yyyy",
                timeFormat: "hh:ii",
                firstDay: 1
            }
        }, $(function() {
            $(".datepicker-here").datepicker();
        });
    }(), function() {
        var templates = {
            days: '<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>',
            months: '<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>',
            years: '<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>'
        }, datepicker = $.fn.datepicker, dp = datepicker.Constructor;
        datepicker.Body = function(d, type, opts) {
            this.d = d, this.type = type, this.opts = opts, this.$el = $(""), this.opts.onlyTimepicker || this.init();
        }, datepicker.Body.prototype = {
            init: function() {
                this._buildBaseHtml(), this._render(), this._bindEvents();
            },
            _bindEvents: function() {
                this.$el.on("click", ".datepicker--cell", $.proxy(this._onClickCell, this));
            },
            _buildBaseHtml: function() {
                this.$el = $(templates[this.type]).appendTo(this.d.$content), this.$names = $(".datepicker--days-names", this.$el), 
                this.$cells = $(".datepicker--cells", this.$el);
            },
            _getDayNamesHtml: function(firstDay, curDay, html, i) {
                return curDay = void 0 != curDay ? curDay : firstDay, html = html ? html : "", (i = void 0 != i ? i : 0) > 7 ? html : 7 == curDay ? this._getDayNamesHtml(firstDay, 0, html, ++i) : (html += '<div class="datepicker--day-name' + (this.d.isWeekend(curDay) ? " -weekend-" : "") + '">' + this.d.loc.daysMin[curDay] + "</div>", 
                this._getDayNamesHtml(firstDay, ++curDay, html, ++i));
            },
            _getCellContents: function(date, type) {
                var classes = "datepicker--cell datepicker--cell-" + type, currentDate = new Date(), parent = this.d, minRange = dp.resetTime(parent.minRange), maxRange = dp.resetTime(parent.maxRange), opts = parent.opts, d = dp.getParsedDate(date), render = {}, html = d.date;
                switch (type) {
                  case "day":
                    parent.isWeekend(d.day) && (classes += " -weekend-"), d.month != this.d.parsedDate.month && (classes += " -other-month-", 
                    opts.selectOtherMonths || (classes += " -disabled-"), opts.showOtherMonths || (html = ""));
                    break;

                  case "month":
                    html = parent.loc[parent.opts.monthsField][d.month];
                    break;

                  case "year":
                    var decade = parent.curDecade;
                    html = d.year, (d.year < decade[0] || d.year > decade[1]) && (classes += " -other-decade-", 
                    opts.selectOtherYears || (classes += " -disabled-"), opts.showOtherYears || (html = ""));
                }
                return opts.onRenderCell && (render = opts.onRenderCell(date, type) || {}, html = render.html ? render.html : html, 
                classes += render.classes ? " " + render.classes : ""), opts.range && (dp.isSame(minRange, date, type) && (classes += " -range-from-"), 
                dp.isSame(maxRange, date, type) && (classes += " -range-to-"), 1 == parent.selectedDates.length && parent.focused ? ((dp.bigger(minRange, date) && dp.less(parent.focused, date) || dp.less(maxRange, date) && dp.bigger(parent.focused, date)) && (classes += " -in-range-"), 
                dp.less(maxRange, date) && dp.isSame(parent.focused, date) && (classes += " -range-from-"), 
                dp.bigger(minRange, date) && dp.isSame(parent.focused, date) && (classes += " -range-to-")) : 2 == parent.selectedDates.length && dp.bigger(minRange, date) && dp.less(maxRange, date) && (classes += " -in-range-")), 
                dp.isSame(currentDate, date, type) && (classes += " -current-"), parent.focused && dp.isSame(date, parent.focused, type) && (classes += " -focus-"), 
                parent._isSelected(date, type) && (classes += " -selected-"), parent._isInRange(date, type) && !render.disabled || (classes += " -disabled-"), 
                {
                    html: html,
                    classes: classes
                };
            },
            _getDaysHtml: function(date) {
                var totalMonthDays = dp.getDaysCount(date), firstMonthDay = new Date(date.getFullYear(), date.getMonth(), 1).getDay(), lastMonthDay = new Date(date.getFullYear(), date.getMonth(), totalMonthDays).getDay(), daysFromPevMonth = firstMonthDay - this.d.loc.firstDay, daysFromNextMonth = 6 - lastMonthDay + this.d.loc.firstDay;
                daysFromPevMonth = daysFromPevMonth < 0 ? daysFromPevMonth + 7 : daysFromPevMonth, 
                daysFromNextMonth = daysFromNextMonth > 6 ? daysFromNextMonth - 7 : daysFromNextMonth;
                for (var m, y, startDayIndex = 1 - daysFromPevMonth, html = "", i = startDayIndex, max = totalMonthDays + daysFromNextMonth; i <= max; i++) y = date.getFullYear(), 
                m = date.getMonth(), html += this._getDayHtml(new Date(y, m, i));
                return html;
            },
            _getDayHtml: function(date) {
                var content = this._getCellContents(date, "day");
                return '<div class="' + content.classes + '" data-date="' + date.getDate() + '" data-month="' + date.getMonth() + '" data-year="' + date.getFullYear() + '">' + content.html + "</div>";
            },
            _getMonthsHtml: function(date) {
                for (var html = "", d = dp.getParsedDate(date), i = 0; i < 12; ) html += this._getMonthHtml(new Date(d.year, i)), 
                i++;
                return html;
            },
            _getMonthHtml: function(date) {
                var content = this._getCellContents(date, "month");
                return '<div class="' + content.classes + '" data-month="' + date.getMonth() + '">' + content.html + "</div>";
            },
            _getYearsHtml: function(date) {
                var decade = (dp.getParsedDate(date), dp.getDecade(date)), firstYear = decade[0] - 1, html = "", i = firstYear;
                for (i; i <= decade[1] + 1; i++) html += this._getYearHtml(new Date(i, 0));
                return html;
            },
            _getYearHtml: function(date) {
                var content = this._getCellContents(date, "year");
                return '<div class="' + content.classes + '" data-year="' + date.getFullYear() + '">' + content.html + "</div>";
            },
            _renderTypes: {
                days: function() {
                    var dayNames = this._getDayNamesHtml(this.d.loc.firstDay), days = this._getDaysHtml(this.d.currentDate);
                    this.$cells.html(days), this.$names.html(dayNames);
                },
                months: function() {
                    var html = this._getMonthsHtml(this.d.currentDate);
                    this.$cells.html(html);
                },
                years: function() {
                    var html = this._getYearsHtml(this.d.currentDate);
                    this.$cells.html(html);
                }
            },
            _render: function() {
                this.opts.onlyTimepicker || this._renderTypes[this.type].bind(this)();
            },
            _update: function() {
                var classes, $cell, date, $cells = $(".datepicker--cell", this.$cells), _this = this;
                $cells.each(function(cell, i) {
                    $cell = $(this), date = _this.d._getDateFromCell($(this)), classes = _this._getCellContents(date, _this.d.cellType), 
                    $cell.attr("class", classes.classes);
                });
            },
            show: function() {
                this.opts.onlyTimepicker || (this.$el.addClass("active"), this.acitve = !0);
            },
            hide: function() {
                this.$el.removeClass("active"), this.active = !1;
            },
            _handleClick: function(el) {
                var date = el.data("date") || 1, month = el.data("month") || 0, year = el.data("year") || this.d.parsedDate.year, dp = this.d;
                if (dp.view != this.opts.minView) return void dp.down(new Date(year, month, date));
                var selectedDate = new Date(year, month, date), alreadySelected = this.d._isSelected(selectedDate, this.d.cellType);
                if (!alreadySelected) return void dp._trigger("clickCell", selectedDate);
                dp._handleAlreadySelectedDates.bind(dp, alreadySelected, selectedDate)();
            },
            _onClickCell: function(e) {
                var $el = $(e.target).closest(".datepicker--cell");
                $el.hasClass("-disabled-") || this._handleClick.bind(this)($el);
            }
        };
    }(), function() {
        var datepicker = $.fn.datepicker, dp = datepicker.Constructor;
        datepicker.Navigation = function(d, opts) {
            this.d = d, this.opts = opts, this.$buttonsContainer = "", this.init();
        }, datepicker.Navigation.prototype = {
            init: function() {
                this._buildBaseHtml(), this._bindEvents();
            },
            _bindEvents: function() {
                this.d.$nav.on("click", ".datepicker--nav-action", $.proxy(this._onClickNavButton, this)), 
                this.d.$nav.on("click", ".datepicker--nav-title", $.proxy(this._onClickNavTitle, this)), 
                this.d.$datepicker.on("click", ".datepicker--button", $.proxy(this._onClickNavButton, this));
            },
            _buildBaseHtml: function() {
                this.opts.onlyTimepicker || this._render(), this._addButtonsIfNeed();
            },
            _addButtonsIfNeed: function() {
                this.opts.todayButton && this._addButton("today"), this.opts.clearButton && this._addButton("clear");
            },
            _render: function() {
                var title = this._getTitle(this.d.currentDate), html = dp.template('<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>', $.extend({
                    title: title
                }, this.opts));
                this.d.$nav.html(html), "years" == this.d.view && $(".datepicker--nav-title", this.d.$nav).addClass("-disabled-"), 
                this.setNavStatus();
            },
            _getTitle: function(date) {
                return this.d.formatDate(this.opts.navTitles[this.d.view], date);
            },
            _addButton: function(type) {
                this.$buttonsContainer.length || this._addButtonsContainer();
                var data = {
                    action: type,
                    label: this.d.loc[type]
                }, html = dp.template('<span class="datepicker--button" data-action="#{action}">#{label}</span>', data);
                $("[data-action=" + type + "]", this.$buttonsContainer).length || this.$buttonsContainer.append(html);
            },
            _addButtonsContainer: function() {
                this.d.$datepicker.append('<div class="datepicker--buttons"></div>'), this.$buttonsContainer = $(".datepicker--buttons", this.d.$datepicker);
            },
            setNavStatus: function() {
                if ((this.opts.minDate || this.opts.maxDate) && this.opts.disableNavWhenOutOfRange) {
                    var date = this.d.parsedDate, m = date.month, y = date.year, d = date.date;
                    switch (this.d.view) {
                      case "days":
                        this.d._isInRange(new Date(y, m - 1, 1), "month") || this._disableNav("prev"), this.d._isInRange(new Date(y, m + 1, 1), "month") || this._disableNav("next");
                        break;

                      case "months":
                        this.d._isInRange(new Date(y - 1, m, d), "year") || this._disableNav("prev"), this.d._isInRange(new Date(y + 1, m, d), "year") || this._disableNav("next");
                        break;

                      case "years":
                        var decade = dp.getDecade(this.d.date);
                        this.d._isInRange(new Date(decade[0] - 1, 0, 1), "year") || this._disableNav("prev"), 
                        this.d._isInRange(new Date(decade[1] + 1, 0, 1), "year") || this._disableNav("next");
                    }
                }
            },
            _disableNav: function(nav) {
                $('[data-action="' + nav + '"]', this.d.$nav).addClass("-disabled-");
            },
            _activateNav: function(nav) {
                $('[data-action="' + nav + '"]', this.d.$nav).removeClass("-disabled-");
            },
            _onClickNavButton: function(e) {
                var $el = $(e.target).closest("[data-action]"), action = $el.data("action");
                this.d[action]();
            },
            _onClickNavTitle: function(e) {
                if (!$(e.target).hasClass("-disabled-")) return "days" == this.d.view ? this.d.view = "months" : void (this.d.view = "years");
            }
        };
    }(), function() {
        var datepicker = $.fn.datepicker, dp = datepicker.Constructor;
        datepicker.Timepicker = function(inst, opts) {
            this.d = inst, this.opts = opts, this.init();
        }, datepicker.Timepicker.prototype = {
            init: function() {
                var input = "input";
                this._setTime(this.d.date), this._buildHTML(), navigator.userAgent.match(/trident/gi) && (input = "change"), 
                this.d.$el.on("selectDate", this._onSelectDate.bind(this)), this.$ranges.on(input, this._onChangeRange.bind(this)), 
                this.$ranges.on("mouseup", this._onMouseUpRange.bind(this)), this.$ranges.on("mousemove focus ", this._onMouseEnterRange.bind(this)), 
                this.$ranges.on("mouseout blur", this._onMouseOutRange.bind(this));
            },
            _setTime: function(date) {
                var _date = dp.getParsedDate(date);
                this._handleDate(date), this.hours = _date.hours < this.minHours ? this.minHours : _date.hours, 
                this.minutes = _date.minutes < this.minMinutes ? this.minMinutes : _date.minutes;
            },
            _setMinTimeFromDate: function(date) {
                this.minHours = date.getHours(), this.minMinutes = date.getMinutes(), this.d.lastSelectedDate && this.d.lastSelectedDate.getHours() > date.getHours() && (this.minMinutes = this.opts.minMinutes);
            },
            _setMaxTimeFromDate: function(date) {
                this.maxHours = date.getHours(), this.maxMinutes = date.getMinutes(), this.d.lastSelectedDate && this.d.lastSelectedDate.getHours() < date.getHours() && (this.maxMinutes = this.opts.maxMinutes);
            },
            _setDefaultMinMaxTime: function() {
                var opts = this.opts;
                this.minHours = opts.minHours < 0 || opts.minHours > 23 ? 0 : opts.minHours, this.minMinutes = opts.minMinutes < 0 || opts.minMinutes > 59 ? 0 : opts.minMinutes, 
                this.maxHours = opts.maxHours < 0 || opts.maxHours > 23 ? 23 : opts.maxHours, this.maxMinutes = opts.maxMinutes < 0 || opts.maxMinutes > 59 ? 59 : opts.maxMinutes;
            },
            _validateHoursMinutes: function(date) {
                this.hours < this.minHours ? this.hours = this.minHours : this.hours > this.maxHours && (this.hours = this.maxHours), 
                this.minutes < this.minMinutes ? this.minutes = this.minMinutes : this.minutes > this.maxMinutes && (this.minutes = this.maxMinutes);
            },
            _buildHTML: function() {
                var lz = dp.getLeadingZeroNum, data = {
                    hourMin: this.minHours,
                    hourMax: lz(this.maxHours),
                    hourStep: this.opts.hoursStep,
                    hourValue: this.hours,
                    hourVisible: lz(this.displayHours),
                    minMin: this.minMinutes,
                    minMax: lz(this.maxMinutes),
                    minStep: this.opts.minutesStep,
                    minValue: lz(this.minutes)
                }, _template = dp.template('<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>', data);
                this.$timepicker = $(_template).appendTo(this.d.$datepicker), this.$ranges = $('[type="range"]', this.$timepicker), 
                this.$hours = $('[name="hours"]', this.$timepicker), this.$minutes = $('[name="minutes"]', this.$timepicker), 
                this.$hoursText = $(".datepicker--time-current-hours", this.$timepicker), this.$minutesText = $(".datepicker--time-current-minutes", this.$timepicker), 
                this.d.ampm && (this.$ampm = $('<span class="datepicker--time-current-ampm">').appendTo($(".datepicker--time-current", this.$timepicker)).html(this.dayPeriod), 
                this.$timepicker.addClass("-am-pm-"));
            },
            _updateCurrentTime: function() {
                var h = dp.getLeadingZeroNum(this.displayHours), m = dp.getLeadingZeroNum(this.minutes);
                this.$hoursText.html(h), this.$minutesText.html(m), this.d.ampm && this.$ampm.html(this.dayPeriod);
            },
            _updateRanges: function() {
                this.$hours.attr({
                    min: this.minHours,
                    max: this.maxHours
                }).val(this.hours), this.$minutes.attr({
                    min: this.minMinutes,
                    max: this.maxMinutes
                }).val(this.minutes);
            },
            _handleDate: function(date) {
                this._setDefaultMinMaxTime(), date && (dp.isSame(date, this.d.opts.minDate) ? this._setMinTimeFromDate(this.d.opts.minDate) : dp.isSame(date, this.d.opts.maxDate) && this._setMaxTimeFromDate(this.d.opts.maxDate)), 
                this._validateHoursMinutes(date);
            },
            update: function() {
                this._updateRanges(), this._updateCurrentTime();
            },
            _getValidHoursFromDate: function(date, ampm) {
                var d = date, hours = date;
                date instanceof Date && (d = dp.getParsedDate(date), hours = d.hours);
                var _ampm = ampm || this.d.ampm, dayPeriod = "am";
                if (_ampm) switch (!0) {
                  case 0 == hours:
                    hours = 12;
                    break;

                  case 12 == hours:
                    dayPeriod = "pm";
                    break;

                  case hours > 11:
                    hours -= 12, dayPeriod = "pm";
                }
                return {
                    hours: hours,
                    dayPeriod: dayPeriod
                };
            },
            set hours(val) {
                this._hours = val;
                var displayHours = this._getValidHoursFromDate(val);
                this.displayHours = displayHours.hours, this.dayPeriod = displayHours.dayPeriod;
            },
            get hours() {
                return this._hours;
            },
            _onChangeRange: function(e) {
                var $target = $(e.target), name = $target.attr("name");
                this.d.timepickerIsActive = !0, this[name] = $target.val(), this._updateCurrentTime(), 
                this.d._trigger("timeChange", [ this.hours, this.minutes ]), this._handleDate(this.d.lastSelectedDate), 
                this.update();
            },
            _onSelectDate: function(e, data) {
                this._handleDate(data), this.update();
            },
            _onMouseEnterRange: function(e) {
                $(".datepicker--time-current-" + $(e.target).attr("name"), this.$timepicker).addClass("-focus-");
            },
            _onMouseOutRange: function(e) {
                var name = $(e.target).attr("name");
                this.d.inFocus || $(".datepicker--time-current-" + name, this.$timepicker).removeClass("-focus-");
            },
            _onMouseUpRange: function(e) {
                this.d.timepickerIsActive = !1;
            }
        };
    }();
}(window, jQuery), function($) {
    $.fn.datepicker.language.en = {
        days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
        daysShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
        daysMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
        months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
        monthsShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
        today: "Today",
        clear: "Clear",
        dateFormat: "mm/dd/yyyy",
        timeFormat: "hh:ii aa",
        firstDay: 0
    };
}(jQuery), function(factory) {
    "function" == typeof define && define.amd ? define([ "jquery" ], factory) : factory("object" == typeof exports ? require("jquery") : window.jQuery || window.Zepto);
}(function($) {
    var mfp, _prevStatus, _document, _prevContentType, _wrapClasses, _currPopupType, MagnificPopup = function() {}, _isJQ = !!window.jQuery, _window = $(window), _mfpOn = function(name, f) {
        mfp.ev.on("mfp" + name + ".mfp", f);
    }, _getEl = function(className, appendTo, html, raw) {
        var el = document.createElement("div");
        return el.className = "mfp-" + className, html && (el.innerHTML = html), raw ? appendTo && appendTo.appendChild(el) : (el = $(el), 
        appendTo && el.appendTo(appendTo)), el;
    }, _mfpTrigger = function(e, data) {
        mfp.ev.triggerHandler("mfp" + e, data), mfp.st.callbacks && (e = e.charAt(0).toLowerCase() + e.slice(1), 
        mfp.st.callbacks[e] && mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [ data ]));
    }, _getCloseBtn = function(type) {
        return type === _currPopupType && mfp.currTemplate.closeBtn || (mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace("%title%", mfp.st.tClose)), 
        _currPopupType = type), mfp.currTemplate.closeBtn;
    }, _checkInstance = function() {
        $.magnificPopup.instance || (mfp = new MagnificPopup(), mfp.init(), $.magnificPopup.instance = mfp);
    }, supportsTransitions = function() {
        var s = document.createElement("p").style, v = [ "ms", "O", "Moz", "Webkit" ];
        if (void 0 !== s.transition) return !0;
        for (;v.length; ) if (v.pop() + "Transition" in s) return !0;
        return !1;
    };
    MagnificPopup.prototype = {
        constructor: MagnificPopup,
        init: function() {
            var appVersion = navigator.appVersion;
            mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener, mfp.isAndroid = /android/gi.test(appVersion), 
            mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion), mfp.supportsTransition = supportsTransitions(), 
            mfp.probablyMobile = mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent), 
            _document = $(document), mfp.popupsCache = {};
        },
        open: function(data) {
            var i;
            if (data.isObj === !1) {
                mfp.items = data.items.toArray(), mfp.index = 0;
                var item, items = data.items;
                for (i = 0; i < items.length; i++) if (item = items[i], item.parsed && (item = item.el[0]), 
                item === data.el[0]) {
                    mfp.index = i;
                    break;
                }
            } else mfp.items = $.isArray(data.items) ? data.items : [ data.items ], mfp.index = data.index || 0;
            if (mfp.isOpen) return void mfp.updateItemHTML();
            mfp.types = [], _wrapClasses = "", data.mainEl && data.mainEl.length ? mfp.ev = data.mainEl.eq(0) : mfp.ev = _document, 
            data.key ? (mfp.popupsCache[data.key] || (mfp.popupsCache[data.key] = {}), mfp.currTemplate = mfp.popupsCache[data.key]) : mfp.currTemplate = {}, 
            mfp.st = $.extend(!0, {}, $.magnificPopup.defaults, data), mfp.fixedContentPos = "auto" === mfp.st.fixedContentPos ? !mfp.probablyMobile : mfp.st.fixedContentPos, 
            mfp.st.modal && (mfp.st.closeOnContentClick = !1, mfp.st.closeOnBgClick = !1, mfp.st.showCloseBtn = !1, 
            mfp.st.enableEscapeKey = !1), mfp.bgOverlay || (mfp.bgOverlay = _getEl("bg").on("click.mfp", function() {
                mfp.close();
            }), mfp.wrap = _getEl("wrap").attr("tabindex", -1).on("click.mfp", function(e) {
                mfp._checkIfClose(e.target) && mfp.close();
            }), mfp.container = _getEl("container", mfp.wrap)), mfp.contentContainer = _getEl("content"), 
            mfp.st.preloader && (mfp.preloader = _getEl("preloader", mfp.container, mfp.st.tLoading));
            var modules = $.magnificPopup.modules;
            for (i = 0; i < modules.length; i++) {
                var n = modules[i];
                n = n.charAt(0).toUpperCase() + n.slice(1), mfp["init" + n].call(mfp);
            }
            _mfpTrigger("BeforeOpen"), mfp.st.showCloseBtn && (mfp.st.closeBtnInside ? (_mfpOn("MarkupParse", function(e, template, values, item) {
                values.close_replaceWith = _getCloseBtn(item.type);
            }), _wrapClasses += " mfp-close-btn-in") : mfp.wrap.append(_getCloseBtn())), mfp.st.alignTop && (_wrapClasses += " mfp-align-top"), 
            mfp.fixedContentPos ? mfp.wrap.css({
                overflow: mfp.st.overflowY,
                overflowX: "hidden",
                overflowY: mfp.st.overflowY
            }) : mfp.wrap.css({
                top: _window.scrollTop(),
                position: "absolute"
            }), (mfp.st.fixedBgPos === !1 || "auto" === mfp.st.fixedBgPos && !mfp.fixedContentPos) && mfp.bgOverlay.css({
                height: _document.height(),
                position: "absolute"
            }), mfp.st.enableEscapeKey && _document.on("keyup.mfp", function(e) {
                27 === e.keyCode && mfp.close();
            }), _window.on("resize.mfp", function() {
                mfp.updateSize();
            }), mfp.st.closeOnContentClick || (_wrapClasses += " mfp-auto-cursor"), _wrapClasses && mfp.wrap.addClass(_wrapClasses);
            var windowHeight = mfp.wH = _window.height(), windowStyles = {};
            if (mfp.fixedContentPos && mfp._hasScrollBar(windowHeight)) {
                var s = mfp._getScrollbarSize();
                s && (windowStyles.marginRight = s);
            }
            mfp.fixedContentPos && (mfp.isIE7 ? $("body, html").css("overflow", "hidden") : windowStyles.overflow = "hidden");
            var classesToadd = mfp.st.mainClass;
            return mfp.isIE7 && (classesToadd += " mfp-ie7"), classesToadd && mfp._addClassToMFP(classesToadd), 
            mfp.updateItemHTML(), _mfpTrigger("BuildControls"), $("html").css(windowStyles), 
            mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body)), mfp._lastFocusedEl = document.activeElement, 
            setTimeout(function() {
                mfp.content ? (mfp._addClassToMFP("mfp-ready"), mfp._setFocus()) : mfp.bgOverlay.addClass("mfp-ready"), 
                _document.on("focusin.mfp", mfp._onFocusIn);
            }, 16), mfp.isOpen = !0, mfp.updateSize(windowHeight), _mfpTrigger("Open"), data;
        },
        close: function() {
            mfp.isOpen && (_mfpTrigger("BeforeClose"), mfp.isOpen = !1, mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition ? (mfp._addClassToMFP("mfp-removing"), 
            setTimeout(function() {
                mfp._close();
            }, mfp.st.removalDelay)) : mfp._close());
        },
        _close: function() {
            _mfpTrigger("Close");
            var classesToRemove = "mfp-removing mfp-ready ";
            if (mfp.bgOverlay.detach(), mfp.wrap.detach(), mfp.container.empty(), mfp.st.mainClass && (classesToRemove += mfp.st.mainClass + " "), 
            mfp._removeClassFromMFP(classesToRemove), mfp.fixedContentPos) {
                var windowStyles = {
                    marginRight: ""
                };
                mfp.isIE7 ? $("body, html").css("overflow", "") : windowStyles.overflow = "", $("html").css(windowStyles);
            }
            _document.off("keyup.mfp focusin.mfp"), mfp.ev.off(".mfp"), mfp.wrap.attr("class", "mfp-wrap").removeAttr("style"), 
            mfp.bgOverlay.attr("class", "mfp-bg"), mfp.container.attr("class", "mfp-container"), 
            !mfp.st.showCloseBtn || mfp.st.closeBtnInside && mfp.currTemplate[mfp.currItem.type] !== !0 || mfp.currTemplate.closeBtn && mfp.currTemplate.closeBtn.detach(), 
            mfp.st.autoFocusLast && mfp._lastFocusedEl && $(mfp._lastFocusedEl).focus(), mfp.currItem = null, 
            mfp.content = null, mfp.currTemplate = null, mfp.prevHeight = 0, _mfpTrigger("AfterClose");
        },
        updateSize: function(winHeight) {
            if (mfp.isIOS) {
                var zoomLevel = document.documentElement.clientWidth / window.innerWidth, height = window.innerHeight * zoomLevel;
                mfp.wrap.css("height", height), mfp.wH = height;
            } else mfp.wH = winHeight || _window.height();
            mfp.fixedContentPos || mfp.wrap.css("height", mfp.wH), _mfpTrigger("Resize");
        },
        updateItemHTML: function() {
            var item = mfp.items[mfp.index];
            mfp.contentContainer.detach(), mfp.content && mfp.content.detach(), item.parsed || (item = mfp.parseEl(mfp.index));
            var type = item.type;
            if (_mfpTrigger("BeforeChange", [ mfp.currItem ? mfp.currItem.type : "", type ]), 
            mfp.currItem = item, !mfp.currTemplate[type]) {
                var markup = !!mfp.st[type] && mfp.st[type].markup;
                _mfpTrigger("FirstMarkupParse", markup), mfp.currTemplate[type] = !markup || $(markup);
            }
            _prevContentType && _prevContentType !== item.type && mfp.container.removeClass("mfp-" + _prevContentType + "-holder");
            var newContent = mfp["get" + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
            mfp.appendContent(newContent, type), item.preloaded = !0, _mfpTrigger("Change", item), 
            _prevContentType = item.type, mfp.container.prepend(mfp.contentContainer), _mfpTrigger("AfterChange");
        },
        appendContent: function(newContent, type) {
            mfp.content = newContent, newContent ? mfp.st.showCloseBtn && mfp.st.closeBtnInside && mfp.currTemplate[type] === !0 ? mfp.content.find(".mfp-close").length || mfp.content.append(_getCloseBtn()) : mfp.content = newContent : mfp.content = "", 
            _mfpTrigger("BeforeAppend"), mfp.container.addClass("mfp-" + type + "-holder"), 
            mfp.contentContainer.append(mfp.content);
        },
        parseEl: function(index) {
            var type, item = mfp.items[index];
            if (item.tagName ? item = {
                el: $(item)
            } : (type = item.type, item = {
                data: item,
                src: item.src
            }), item.el) {
                for (var types = mfp.types, i = 0; i < types.length; i++) if (item.el.hasClass("mfp-" + types[i])) {
                    type = types[i];
                    break;
                }
                item.src = item.el.attr("data-mfp-src"), item.src || (item.src = item.el.attr("href"));
            }
            return item.type = type || mfp.st.type || "inline", item.index = index, item.parsed = !0, 
            mfp.items[index] = item, _mfpTrigger("ElementParse", item), mfp.items[index];
        },
        addGroup: function(el, options) {
            var eHandler = function(e) {
                e.mfpEl = this, mfp._openClick(e, el, options);
            };
            options || (options = {});
            var eName = "click.magnificPopup";
            options.mainEl = el, options.items ? (options.isObj = !0, el.off(eName).on(eName, eHandler)) : (options.isObj = !1, 
            options.delegate ? el.off(eName).on(eName, options.delegate, eHandler) : (options.items = el, 
            el.off(eName).on(eName, eHandler)));
        },
        _openClick: function(e, el, options) {
            if ((void 0 !== options.midClick ? options.midClick : $.magnificPopup.defaults.midClick) || !(2 === e.which || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
                var disableOn = void 0 !== options.disableOn ? options.disableOn : $.magnificPopup.defaults.disableOn;
                if (disableOn) if ($.isFunction(disableOn)) {
                    if (!disableOn.call(mfp)) return !0;
                } else if (_window.width() < disableOn) return !0;
                e.type && (e.preventDefault(), mfp.isOpen && e.stopPropagation()), options.el = $(e.mfpEl), 
                options.delegate && (options.items = el.find(options.delegate)), mfp.open(options);
            }
        },
        updateStatus: function(status, text) {
            if (mfp.preloader) {
                _prevStatus !== status && mfp.container.removeClass("mfp-s-" + _prevStatus), text || "loading" !== status || (text = mfp.st.tLoading);
                var data = {
                    status: status,
                    text: text
                };
                _mfpTrigger("UpdateStatus", data), status = data.status, text = data.text, mfp.preloader.html(text), 
                mfp.preloader.find("a").on("click", function(e) {
                    e.stopImmediatePropagation();
                }), mfp.container.addClass("mfp-s-" + status), _prevStatus = status;
            }
        },
        _checkIfClose: function(target) {
            if (!$(target).hasClass("mfp-prevent-close")) {
                var closeOnContent = mfp.st.closeOnContentClick, closeOnBg = mfp.st.closeOnBgClick;
                if (closeOnContent && closeOnBg) return !0;
                if (!mfp.content || $(target).hasClass("mfp-close") || mfp.preloader && target === mfp.preloader[0]) return !0;
                if (target === mfp.content[0] || $.contains(mfp.content[0], target)) {
                    if (closeOnContent) return !0;
                } else if (closeOnBg && $.contains(document, target)) return !0;
                return !1;
            }
        },
        _addClassToMFP: function(cName) {
            mfp.bgOverlay.addClass(cName), mfp.wrap.addClass(cName);
        },
        _removeClassFromMFP: function(cName) {
            this.bgOverlay.removeClass(cName), mfp.wrap.removeClass(cName);
        },
        _hasScrollBar: function(winHeight) {
            return (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height());
        },
        _setFocus: function() {
            (mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
        },
        _onFocusIn: function(e) {
            if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) return mfp._setFocus(), 
            !1;
        },
        _parseMarkup: function(template, values, item) {
            var arr;
            item.data && (values = $.extend(item.data, values)), _mfpTrigger("MarkupParse", [ template, values, item ]), 
            $.each(values, function(key, value) {
                if (void 0 === value || value === !1) return !0;
                if (arr = key.split("_"), arr.length > 1) {
                    var el = template.find(".mfp-" + arr[0]);
                    if (el.length > 0) {
                        var attr = arr[1];
                        "replaceWith" === attr ? el[0] !== value[0] && el.replaceWith(value) : "img" === attr ? el.is("img") ? el.attr("src", value) : el.replaceWith($("<img>").attr("src", value).attr("class", el.attr("class"))) : el.attr(arr[1], value);
                    }
                } else template.find(".mfp-" + key).html(value);
            });
        },
        _getScrollbarSize: function() {
            if (void 0 === mfp.scrollbarSize) {
                var scrollDiv = document.createElement("div");
                scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;", 
                document.body.appendChild(scrollDiv), mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth, 
                document.body.removeChild(scrollDiv);
            }
            return mfp.scrollbarSize;
        }
    }, $.magnificPopup = {
        instance: null,
        proto: MagnificPopup.prototype,
        modules: [],
        open: function(options, index) {
            return _checkInstance(), options = options ? $.extend(!0, {}, options) : {}, options.isObj = !0, 
            options.index = index || 0, this.instance.open(options);
        },
        close: function() {
            return $.magnificPopup.instance && $.magnificPopup.instance.close();
        },
        registerModule: function(name, module) {
            module.options && ($.magnificPopup.defaults[name] = module.options), $.extend(this.proto, module.proto), 
            this.modules.push(name);
        },
        defaults: {
            disableOn: 0,
            key: null,
            midClick: !1,
            mainClass: "",
            preloader: !0,
            focus: "",
            closeOnContentClick: !1,
            closeOnBgClick: !0,
            closeBtnInside: !0,
            showCloseBtn: !0,
            enableEscapeKey: !0,
            modal: !1,
            alignTop: !1,
            removalDelay: 0,
            prependTo: null,
            fixedContentPos: "auto",
            fixedBgPos: "auto",
            overflowY: "auto",
            closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',
            tClose: "Close (Esc)",
            tLoading: "Loading...",
            autoFocusLast: !0
        }
    }, $.fn.magnificPopup = function(options) {
        _checkInstance();
        var jqEl = $(this);
        if ("string" == typeof options) if ("open" === options) {
            var items, itemOpts = _isJQ ? jqEl.data("magnificPopup") : jqEl[0].magnificPopup, index = parseInt(arguments[1], 10) || 0;
            itemOpts.items ? items = itemOpts.items[index] : (items = jqEl, itemOpts.delegate && (items = items.find(itemOpts.delegate)), 
            items = items.eq(index)), mfp._openClick({
                mfpEl: items
            }, jqEl, itemOpts);
        } else mfp.isOpen && mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1)); else options = $.extend(!0, {}, options), 
        _isJQ ? jqEl.data("magnificPopup", options) : jqEl[0].magnificPopup = options, mfp.addGroup(jqEl, options);
        return jqEl;
    };
    var _hiddenClass, _inlinePlaceholder, _lastInlineElement, _putInlineElementsBack = function() {
        _lastInlineElement && (_inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach(), 
        _lastInlineElement = null);
    };
    $.magnificPopup.registerModule("inline", {
        options: {
            hiddenClass: "hide",
            markup: "",
            tNotFound: "Content not found"
        },
        proto: {
            initInline: function() {
                mfp.types.push("inline"), _mfpOn("Close.inline", function() {
                    _putInlineElementsBack();
                });
            },
            getInline: function(item, template) {
                if (_putInlineElementsBack(), item.src) {
                    var inlineSt = mfp.st.inline, el = $(item.src);
                    if (el.length) {
                        var parent = el[0].parentNode;
                        parent && parent.tagName && (_inlinePlaceholder || (_hiddenClass = inlineSt.hiddenClass, 
                        _inlinePlaceholder = _getEl(_hiddenClass), _hiddenClass = "mfp-" + _hiddenClass), 
                        _lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass)), 
                        mfp.updateStatus("ready");
                    } else mfp.updateStatus("error", inlineSt.tNotFound), el = $("<div>");
                    return item.inlineElement = el, el;
                }
                return mfp.updateStatus("ready"), mfp._parseMarkup(template, {}, item), template;
            }
        }
    });
    var _ajaxCur, _removeAjaxCursor = function() {
        _ajaxCur && $(document.body).removeClass(_ajaxCur);
    }, _destroyAjaxRequest = function() {
        _removeAjaxCursor(), mfp.req && mfp.req.abort();
    };
    $.magnificPopup.registerModule("ajax", {
        options: {
            settings: null,
            cursor: "mfp-ajax-cur",
            tError: '<a href="%url%">The content</a> could not be loaded.'
        },
        proto: {
            initAjax: function() {
                mfp.types.push("ajax"), _ajaxCur = mfp.st.ajax.cursor, _mfpOn("Close.ajax", _destroyAjaxRequest), 
                _mfpOn("BeforeChange.ajax", _destroyAjaxRequest);
            },
            getAjax: function(item) {
                _ajaxCur && $(document.body).addClass(_ajaxCur), mfp.updateStatus("loading");
                var opts = $.extend({
                    url: item.src,
                    success: function(data, textStatus, jqXHR) {
                        var temp = {
                            data: data,
                            xhr: jqXHR
                        };
                        _mfpTrigger("ParseAjax", temp), mfp.appendContent($(temp.data), "ajax"), item.finished = !0, 
                        _removeAjaxCursor(), mfp._setFocus(), setTimeout(function() {
                            mfp.wrap.addClass("mfp-ready");
                        }, 16), mfp.updateStatus("ready"), _mfpTrigger("AjaxContentAdded");
                    },
                    error: function() {
                        _removeAjaxCursor(), item.finished = item.loadError = !0, mfp.updateStatus("error", mfp.st.ajax.tError.replace("%url%", item.src));
                    }
                }, mfp.st.ajax.settings);
                return mfp.req = $.ajax(opts), "";
            }
        }
    });
    var _imgInterval, _getTitle = function(item) {
        if (item.data && void 0 !== item.data.title) return item.data.title;
        var src = mfp.st.image.titleSrc;
        if (src) {
            if ($.isFunction(src)) return src.call(mfp, item);
            if (item.el) return item.el.attr(src) || "";
        }
        return "";
    };
    $.magnificPopup.registerModule("image", {
        options: {
            markup: '<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',
            cursor: "mfp-zoom-out-cur",
            titleSrc: "title",
            verticalFit: !0,
            tError: '<a href="%url%">The image</a> could not be loaded.'
        },
        proto: {
            initImage: function() {
                var imgSt = mfp.st.image, ns = ".image";
                mfp.types.push("image"), _mfpOn("Open" + ns, function() {
                    "image" === mfp.currItem.type && imgSt.cursor && $(document.body).addClass(imgSt.cursor);
                }), _mfpOn("Close" + ns, function() {
                    imgSt.cursor && $(document.body).removeClass(imgSt.cursor), _window.off("resize.mfp");
                }), _mfpOn("Resize" + ns, mfp.resizeImage), mfp.isLowIE && _mfpOn("AfterChange", mfp.resizeImage);
            },
            resizeImage: function() {
                var item = mfp.currItem;
                if (item && item.img && mfp.st.image.verticalFit) {
                    var decr = 0;
                    mfp.isLowIE && (decr = parseInt(item.img.css("padding-top"), 10) + parseInt(item.img.css("padding-bottom"), 10)), 
                    item.img.css("max-height", mfp.wH - decr);
                }
            },
            _onImageHasSize: function(item) {
                item.img && (item.hasSize = !0, _imgInterval && clearInterval(_imgInterval), item.isCheckingImgSize = !1, 
                _mfpTrigger("ImageHasSize", item), item.imgHidden && (mfp.content && mfp.content.removeClass("mfp-loading"), 
                item.imgHidden = !1));
            },
            findImageSize: function(item) {
                var counter = 0, img = item.img[0], mfpSetInterval = function(delay) {
                    _imgInterval && clearInterval(_imgInterval), _imgInterval = setInterval(function() {
                        if (img.naturalWidth > 0) return void mfp._onImageHasSize(item);
                        counter > 200 && clearInterval(_imgInterval), counter++, 3 === counter ? mfpSetInterval(10) : 40 === counter ? mfpSetInterval(50) : 100 === counter && mfpSetInterval(500);
                    }, delay);
                };
                mfpSetInterval(1);
            },
            getImage: function(item, template) {
                var guard = 0, onLoadComplete = function() {
                    item && (item.img[0].complete ? (item.img.off(".mfploader"), item === mfp.currItem && (mfp._onImageHasSize(item), 
                    mfp.updateStatus("ready")), item.hasSize = !0, item.loaded = !0, _mfpTrigger("ImageLoadComplete")) : (guard++, 
                    guard < 200 ? setTimeout(onLoadComplete, 100) : onLoadError()));
                }, onLoadError = function() {
                    item && (item.img.off(".mfploader"), item === mfp.currItem && (mfp._onImageHasSize(item), 
                    mfp.updateStatus("error", imgSt.tError.replace("%url%", item.src))), item.hasSize = !0, 
                    item.loaded = !0, item.loadError = !0);
                }, imgSt = mfp.st.image, el = template.find(".mfp-img");
                if (el.length) {
                    var img = document.createElement("img");
                    img.className = "mfp-img", item.el && item.el.find("img").length && (img.alt = item.el.find("img").attr("alt")), 
                    item.img = $(img).on("load.mfploader", onLoadComplete).on("error.mfploader", onLoadError), 
                    img.src = item.src, el.is("img") && (item.img = item.img.clone()), img = item.img[0], 
                    img.naturalWidth > 0 ? item.hasSize = !0 : img.width || (item.hasSize = !1);
                }
                return mfp._parseMarkup(template, {
                    title: _getTitle(item),
                    img_replaceWith: item.img
                }, item), mfp.resizeImage(), item.hasSize ? (_imgInterval && clearInterval(_imgInterval), 
                item.loadError ? (template.addClass("mfp-loading"), mfp.updateStatus("error", imgSt.tError.replace("%url%", item.src))) : (template.removeClass("mfp-loading"), 
                mfp.updateStatus("ready")), template) : (mfp.updateStatus("loading"), item.loading = !0, 
                item.hasSize || (item.imgHidden = !0, template.addClass("mfp-loading"), mfp.findImageSize(item)), 
                template);
            }
        }
    });
    var hasMozTransform, getHasMozTransform = function() {
        return void 0 === hasMozTransform && (hasMozTransform = void 0 !== document.createElement("p").style.MozTransform), 
        hasMozTransform;
    };
    $.magnificPopup.registerModule("zoom", {
        options: {
            enabled: !1,
            easing: "ease-in-out",
            duration: 300,
            opener: function(element) {
                return element.is("img") ? element : element.find("img");
            }
        },
        proto: {
            initZoom: function() {
                var image, zoomSt = mfp.st.zoom, ns = ".zoom";
                if (zoomSt.enabled && mfp.supportsTransition) {
                    var openTimeout, animatedImg, duration = zoomSt.duration, getElToAnimate = function(image) {
                        var newImg = image.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"), transition = "all " + zoomSt.duration / 1e3 + "s " + zoomSt.easing, cssObj = {
                            position: "fixed",
                            zIndex: 9999,
                            left: 0,
                            top: 0,
                            "-webkit-backface-visibility": "hidden"
                        }, t = "transition";
                        return cssObj["-webkit-" + t] = cssObj["-moz-" + t] = cssObj["-o-" + t] = cssObj[t] = transition, 
                        newImg.css(cssObj), newImg;
                    }, showMainContent = function() {
                        mfp.content.css("visibility", "visible");
                    };
                    _mfpOn("BuildControls" + ns, function() {
                        if (mfp._allowZoom()) {
                            if (clearTimeout(openTimeout), mfp.content.css("visibility", "hidden"), !(image = mfp._getItemToZoom())) return void showMainContent();
                            animatedImg = getElToAnimate(image), animatedImg.css(mfp._getOffset()), mfp.wrap.append(animatedImg), 
                            openTimeout = setTimeout(function() {
                                animatedImg.css(mfp._getOffset(!0)), openTimeout = setTimeout(function() {
                                    showMainContent(), setTimeout(function() {
                                        animatedImg.remove(), image = animatedImg = null, _mfpTrigger("ZoomAnimationEnded");
                                    }, 16);
                                }, duration);
                            }, 16);
                        }
                    }), _mfpOn("BeforeClose" + ns, function() {
                        if (mfp._allowZoom()) {
                            if (clearTimeout(openTimeout), mfp.st.removalDelay = duration, !image) {
                                if (!(image = mfp._getItemToZoom())) return;
                                animatedImg = getElToAnimate(image);
                            }
                            animatedImg.css(mfp._getOffset(!0)), mfp.wrap.append(animatedImg), mfp.content.css("visibility", "hidden"), 
                            setTimeout(function() {
                                animatedImg.css(mfp._getOffset());
                            }, 16);
                        }
                    }), _mfpOn("Close" + ns, function() {
                        mfp._allowZoom() && (showMainContent(), animatedImg && animatedImg.remove(), image = null);
                    });
                }
            },
            _allowZoom: function() {
                return "image" === mfp.currItem.type;
            },
            _getItemToZoom: function() {
                return !!mfp.currItem.hasSize && mfp.currItem.img;
            },
            _getOffset: function(isLarge) {
                var el;
                el = isLarge ? mfp.currItem.img : mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
                var offset = el.offset(), paddingTop = parseInt(el.css("padding-top"), 10), paddingBottom = parseInt(el.css("padding-bottom"), 10);
                offset.top -= $(window).scrollTop() - paddingTop;
                var obj = {
                    width: el.width(),
                    height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
                };
                return getHasMozTransform() ? obj["-moz-transform"] = obj.transform = "translate(" + offset.left + "px," + offset.top + "px)" : (obj.left = offset.left, 
                obj.top = offset.top), obj;
            }
        }
    });
    var _fixIframeBugs = function(isShowing) {
        if (mfp.currTemplate.iframe) {
            var el = mfp.currTemplate.iframe.find("iframe");
            el.length && (isShowing || (el[0].src = "//about:blank"), mfp.isIE8 && el.css("display", isShowing ? "block" : "none"));
        }
    };
    $.magnificPopup.registerModule("iframe", {
        options: {
            markup: '<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',
            srcAction: "iframe_src",
            patterns: {
                youtube: {
                    index: "youtube.com",
                    id: "v=",
                    src: "//www.youtube.com/embed/%id%?autoplay=1"
                },
                vimeo: {
                    index: "vimeo.com/",
                    id: "/",
                    src: "//player.vimeo.com/video/%id%?autoplay=1"
                },
                gmaps: {
                    index: "//maps.google.",
                    src: "%id%&output=embed"
                }
            }
        },
        proto: {
            initIframe: function() {
                mfp.types.push("iframe"), _mfpOn("BeforeChange", function(e, prevType, newType) {
                    prevType !== newType && ("iframe" === prevType ? _fixIframeBugs() : "iframe" === newType && _fixIframeBugs(!0));
                }), _mfpOn("Close.iframe", function() {
                    _fixIframeBugs();
                });
            },
            getIframe: function(item, template) {
                var embedSrc = item.src, iframeSt = mfp.st.iframe;
                $.each(iframeSt.patterns, function() {
                    if (embedSrc.indexOf(this.index) > -1) return this.id && (embedSrc = "string" == typeof this.id ? embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length) : this.id.call(this, embedSrc)), 
                    embedSrc = this.src.replace("%id%", embedSrc), !1;
                });
                var dataObj = {};
                return iframeSt.srcAction && (dataObj[iframeSt.srcAction] = embedSrc), mfp._parseMarkup(template, dataObj, item), 
                mfp.updateStatus("ready"), template;
            }
        }
    });
    var _getLoopedId = function(index) {
        var numSlides = mfp.items.length;
        return index > numSlides - 1 ? index - numSlides : index < 0 ? numSlides + index : index;
    }, _replaceCurrTotal = function(text, curr, total) {
        return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
    };
    $.magnificPopup.registerModule("gallery", {
        options: {
            enabled: !1,
            arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
            preload: [ 0, 2 ],
            navigateByImgClick: !0,
            arrows: !0,
            tPrev: "Previous (Left arrow key)",
            tNext: "Next (Right arrow key)",
            tCounter: "%curr% of %total%"
        },
        proto: {
            initGallery: function() {
                var gSt = mfp.st.gallery, ns = ".mfp-gallery";
                if (mfp.direction = !0, !gSt || !gSt.enabled) return !1;
                _wrapClasses += " mfp-gallery", _mfpOn("Open" + ns, function() {
                    gSt.navigateByImgClick && mfp.wrap.on("click" + ns, ".mfp-img", function() {
                        if (mfp.items.length > 1) return mfp.next(), !1;
                    }), _document.on("keydown" + ns, function(e) {
                        37 === e.keyCode ? mfp.prev() : 39 === e.keyCode && mfp.next();
                    });
                }), _mfpOn("UpdateStatus" + ns, function(e, data) {
                    data.text && (data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length));
                }), _mfpOn("MarkupParse" + ns, function(e, element, values, item) {
                    var l = mfp.items.length;
                    values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : "";
                }), _mfpOn("BuildControls" + ns, function() {
                    if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
                        var markup = gSt.arrowMarkup, arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, "left")).addClass("mfp-prevent-close"), arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, "right")).addClass("mfp-prevent-close");
                        arrowLeft.click(function() {
                            mfp.prev();
                        }), arrowRight.click(function() {
                            mfp.next();
                        }), mfp.container.append(arrowLeft.add(arrowRight));
                    }
                }), _mfpOn("Change" + ns, function() {
                    mfp._preloadTimeout && clearTimeout(mfp._preloadTimeout), mfp._preloadTimeout = setTimeout(function() {
                        mfp.preloadNearbyImages(), mfp._preloadTimeout = null;
                    }, 16);
                }), _mfpOn("Close" + ns, function() {
                    _document.off(ns), mfp.wrap.off("click" + ns), mfp.arrowRight = mfp.arrowLeft = null;
                });
            },
            next: function() {
                mfp.direction = !0, mfp.index = _getLoopedId(mfp.index + 1), mfp.updateItemHTML();
            },
            prev: function() {
                mfp.direction = !1, mfp.index = _getLoopedId(mfp.index - 1), mfp.updateItemHTML();
            },
            goTo: function(newIndex) {
                mfp.direction = newIndex >= mfp.index, mfp.index = newIndex, mfp.updateItemHTML();
            },
            preloadNearbyImages: function() {
                var i, p = mfp.st.gallery.preload, preloadBefore = Math.min(p[0], mfp.items.length), preloadAfter = Math.min(p[1], mfp.items.length);
                for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) mfp._preloadItem(mfp.index + i);
                for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) mfp._preloadItem(mfp.index - i);
            },
            _preloadItem: function(index) {
                if (index = _getLoopedId(index), !mfp.items[index].preloaded) {
                    var item = mfp.items[index];
                    item.parsed || (item = mfp.parseEl(index)), _mfpTrigger("LazyLoad", item), "image" === item.type && (item.img = $('<img class="mfp-img" />').on("load.mfploader", function() {
                        item.hasSize = !0;
                    }).on("error.mfploader", function() {
                        item.hasSize = !0, item.loadError = !0, _mfpTrigger("LazyLoadError", item);
                    }).attr("src", item.src)), item.preloaded = !0;
                }
            }
        }
    });
    $.magnificPopup.registerModule("retina", {
        options: {
            replaceSrc: function(item) {
                return item.src.replace(/\.\w+$/, function(m) {
                    return "@2x" + m;
                });
            },
            ratio: 1
        },
        proto: {
            initRetina: function() {
                if (window.devicePixelRatio > 1) {
                    var st = mfp.st.retina, ratio = st.ratio;
                    ratio = isNaN(ratio) ? ratio() : ratio, ratio > 1 && (_mfpOn("ImageHasSize.retina", function(e, item) {
                        item.img.css({
                            "max-width": item.img[0].naturalWidth / ratio,
                            width: "100%"
                        });
                    }), _mfpOn("ElementParse.retina", function(e, item) {
                        item.src = st.replaceSrc(item, ratio);
                    }));
                }
            }
        }
    }), _checkInstance();
}), function($) {
    "use strict";
    var TS = window.TS || {
        _views: {},
        _vent: Backbone.Events
    };
    TS._views.TimesheetNewRecordDialogView = Backbone.View.extend({
        events: {
            "submit form#timesheet-new-record-form": "validate"
        },
        initialize: function(options) {
            _.bindAll(this, "validate"), this.options = options || {}, console.log("View [TimesheetNewRecordDialogView] initialize!"), 
            this.$form = this.$el.find("form"), this.$form.validate({
                rules: {
                    _tscf_new_start_time: {
                        required: !0
                    },
                    _tscf_new_end_time: {
                        required: !0
                    },
                    _tscf_new_event_or_data: {
                        required: !0,
                        maxlength: 120
                    },
                    _tscf_new_color: {
                        required: !0,
                        maxlength: 80
                    }
                }
            }), this.$form.find(".wpcolorpicker").wpColorPicker(), console.log("View [TimesheetNewRecordDialogView] before magnificPopup init!"), 
            this.isEdit = 0;
        },
        open: function(formData, isEdit) {
            var self = this;
            this.isEdit = isEdit, this.populateForm(formData), $.magnificPopup.open({
                items: {
                    src: self.$el
                },
                type: "inline",
                closeOnBgClick: !1,
                preloader: !1,
                callbacks: {
                    open: function() {
                        self.afterPopupOpened(), console.log("View [TimesheetNewRecordDialogView] open!");
                    },
                    close: function() {
                        self.$form.find(":input").val(""), self.$form.find(".month-datepicker").each(function(index, el) {
                            $(this).data("datepicker").destroy();
                        }), console.log("View [TimesheetNewRecordDialogView] close!");
                    }
                }
            });
        },
        afterPopupOpened: function() {
            var minYear = TS.$postForm.find("input[name=_tscf_start_date]").val(), maxYear = TS.$postForm.find("input[name=_tscf_end_time]").val();
            this.$form.find(".month-datepicker").each(function(index, el) {
                var dp = $(this).datepicker({
                    view: "months",
                    minView: "months",
                    language: "en",
                    dateFormat: "mm/yyyy",
                    autoClose: !0,
                    onRenderCell: function(date, cellType) {
                        if ("month" == cellType) {
                            var year = date.getFullYear(), isDisabled = !0;
                            return minYear <= year && year <= maxYear && (isDisabled = !1), {
                                disabled: isDisabled
                            };
                        }
                    }
                }).data("datepicker"), monthYear = $(this).val();
                if (monthYear) {
                    monthYear = monthYear.split("/");
                    var d = new Date();
                    d.setMonth(monthYear[0] - 1), d.setFullYear(monthYear[1]), dp.selectDate(d);
                }
            });
        },
        populateForm: function(data) {
            this.$form.find("input[name=_tscf_new_record_index]").val(data.index), this.$form.find("input[name=_tscf_new_start_time]").val(data.start_time), 
            this.$form.find("input[name=_tscf_new_end_time]").val(data.end_time), this.$form.find("input[name=_tscf_new_event_or_data]").val(data.event_or_data), 
            this.$form.find("input[name=_tscf_new_color]").val(data.color), this.$form.find(".wpcolorpicker").wpColorPicker("color", data.color);
        },
        validate: function(e) {
            e.preventDefault(), this.$form.valid() && this.save();
        },
        save: function() {
            var fields = this.$form.serializeArray(), rc = {
                index: _.findWhere(fields, {
                    name: "_tscf_new_record_index"
                }).value,
                start_time: _.findWhere(fields, {
                    name: "_tscf_new_start_time"
                }).value,
                end_time: _.findWhere(fields, {
                    name: "_tscf_new_end_time"
                }).value,
                event_or_data: _.findWhere(fields, {
                    name: "_tscf_new_event_or_data"
                }).value,
                color: _.findWhere(fields, {
                    name: "_tscf_new_color"
                }).value
            };
            this.isEdit ? this.options.parent.renderTableRow(rc, 1) : this.options.parent.renderTableRow(rc, 0), 
            $.magnificPopup.close();
        }
    }), TS._views.TimeSheetView = Backbone.View.extend({
        events: {
            "click #add-new-timesheet-record-btn": "addRow",
            "click .remove-item": "removeRow",
            "click .edit-item": "editRow"
        },
        initialize: function() {
            var self = this;
            this.tmpl = _.template($("#timesheet-records-table-item").html()), this.$timesheetRecordsTableBody = this.$el.find("#timesheet-records-table > tbody"), 
            this.$noRecordsIndicatorRow = this.$timesheetRecordsTableBody.find("tr.no-records-found"), 
            this.$startDateControl = this.$timesheetRecordsTableBody.find("input[name=_tscf_start_date]"), 
            this.$endDateControl = this.$timesheetRecordsTableBody.find("input[name=_tscf_end_time]"), 
            this.$timesheetRecordsTableBody.sortable({
                placeholder: "ui-state-highlight",
                update: function(event, ui) {
                    self.reorderRowIndices();
                }
            }), this.timesheetNewRecordDialogView = new TS._views.TimesheetNewRecordDialogView({
                parent: this,
                el: "#timesheet-new-record-dialog"
            });
        },
        isYearsSelected: function() {
            return TS.$postForm.valid();
        },
        addRow: function(e) {
            if (e.preventDefault(), this.isYearsSelected()) {
                var newRecordIndex = this.$timesheetRecordsTableBody.find("tr[data-index]").length + 1, rc = {
                    index: newRecordIndex,
                    start_time: "",
                    end_time: "",
                    event_or_data: "",
                    color: "#2ab515"
                };
                this.timesheetNewRecordDialogView.open(rc, !1);
            }
        },
        renderTableRow: function(rc, isEdit) {
            var compiled = this.tmpl({
                rc: rc
            });
            this.$noRecordsIndicatorRow.hide(), isEdit ? this.$timesheetRecordsTableBody.find('tr[data-index="' + rc.index + '"]').replaceWith(compiled) : this.$timesheetRecordsTableBody.append(compiled), 
            this.refreshSortable();
        },
        editRow: function(e) {
            if (this.isYearsSelected()) {
                var $row = $(e.currentTarget).closest("tr"), fields = $row.find(":input").serializeArray(), rowIndex = $row.data("index");
                console.log("View [TimeSheetView] editRow method!", fields);
                var rc = {
                    index: rowIndex,
                    start_time: _.findWhere(fields, {
                        name: "_tscf_record_start_time[" + rowIndex + "]"
                    }).value,
                    end_time: _.findWhere(fields, {
                        name: "_tscf_record_end_time[" + rowIndex + "]"
                    }).value,
                    event_or_data: _.findWhere(fields, {
                        name: "_tscf_record_event_or_data[" + rowIndex + "]"
                    }).value,
                    color: _.findWhere(fields, {
                        name: "_tscf_record_color[" + rowIndex + "]"
                    }).value
                };
                console.log("View [TimeSheetView] editRow method!", rc), this.timesheetNewRecordDialogView.open(rc, !0);
            }
        },
        removeRow: function(e) {
            e.preventDefault();
            var $target = $(e.currentTarget).closest("tr");
            $target.hide("slow", _.bind(function() {
                $target.remove(), 1 == this.$timesheetRecordsTableBody.find("tr").length && this.$noRecordsIndicatorRow.show(), 
                this.refreshSortable();
            }, this));
        },
        reorderRowIndices: function() {
            this.$timesheetRecordsTableBody.find("tr").not(this.$noRecordsIndicatorRow).each(function(index, el) {
                $(el).find("td:first").text(index + 1);
            });
        },
        refreshSortable: function() {
            this.$timesheetRecordsTableBody.sortable("refresh"), this.reorderRowIndices();
        }
    }), $(function() {
        TS.$postForm = $("form[name=post]"), TS.$postForm.find(".year-datepicker").each(function(index, el) {
            var dp = $(this).datepicker({
                view: "years",
                minView: "years",
                language: "en",
                dateFormat: "yyyy",
                autoClose: !0
            }).data("datepicker"), year = $(this).val();
            if (year) {
                var d = new Date();
                d.setFullYear(year), dp.selectDate(d);
            }
        }), new TS._views.TimeSheetView({
            el: "#timesheets-form"
        }), TS.$postForm.validate({
            rules: {
                _tscf_timesheet_name: {
                    required: !0,
                    maxlength: 120
                },
                _tscf_start_date: {
                    required: !0
                },
                _tscf_end_time: {
                    required: !0
                }
            }
        }), window.TS = TS;
    });
}(jQuery);